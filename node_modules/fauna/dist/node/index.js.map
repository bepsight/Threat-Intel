{
  "version": 3,
  "sources": ["../../node_modules/base64-js/index.js", "../../src/index.ts", "../../src/client-configuration.ts", "../../src/errors.ts", "../../src/http-client/paths.ts", "../../src/http-client/fetch-client.ts", "../../src/http-client/node-http2-client.ts", "../../src/http-client/index.ts", "../../src/tagged-type.ts", "../../src/regex.ts", "../../src/values/date-time.ts", "../../src/values/doc.ts", "../../src/values/set.ts", "../../src/values/stream.ts", "../../src/query-builder.ts", "../../src/util/package-version.ts", "../../src/util/environment.ts", "../../src/util/retryable.ts", "../../src/wire-protocol.ts", "../../src/client.ts"],
  "sourcesContent": ["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "export { Client, StreamClient, FeedClient } from \"./client\";\nexport {\n  endpoints,\n  type ClientConfiguration,\n  type Endpoints,\n  type StreamClientConfiguration,\n  type FeedClientConfiguration,\n} from \"./client-configuration\";\nexport {\n  AbortError,\n  AuthenticationError,\n  AuthorizationError,\n  ClientError,\n  ClientClosedError,\n  ConstraintFailureError,\n  ContendedTransactionError,\n  FaunaError,\n  InvalidRequestError,\n  NetworkError,\n  ProtocolError,\n  QueryCheckError,\n  QueryRuntimeError,\n  QueryTimeoutError,\n  ServiceError,\n  ServiceInternalError,\n  ThrottlingError,\n} from \"./errors\";\nexport {\n  fql,\n  type Query,\n  type QueryArgument,\n  type QueryArgumentObject,\n} from \"./query-builder\";\nexport {\n  DecodeOptions,\n  LONG_MAX,\n  LONG_MIN,\n  TaggedTypeFormat,\n} from \"./tagged-type\";\nexport {\n  type ArrayFragment,\n  type ConstraintFailure,\n  type EncodedObject,\n  type FeedError,\n  type FeedRequest,\n  type FeedSuccess,\n  type FQLFragment,\n  type ObjectFragment,\n  type QueryFailure,\n  type QueryInfo,\n  type QueryInterpolation,\n  type QueryOptions,\n  type QueryRequest,\n  type QueryStats,\n  type QuerySuccess,\n  type QueryValue,\n  type QueryValueObject,\n  type Span,\n  type StreamEventData,\n  type StreamEventError,\n  type StreamEventStatus,\n  type StreamRequest,\n  type TaggedBytes,\n  type TaggedDate,\n  type TaggedDouble,\n  type TaggedInt,\n  type TaggedLong,\n  type TaggedMod,\n  type TaggedObject,\n  type TaggedRef,\n  type TaggedTime,\n  type TaggedType,\n  type ValueFormat,\n  type ValueFragment,\n} from \"./wire-protocol\";\nexport {\n  DateStub,\n  Document,\n  DocumentReference,\n  EmbeddedSet,\n  FlattenedSetIterator,\n  Module,\n  NamedDocument,\n  NamedDocumentReference,\n  NullDocument,\n  Page,\n  SetIterator,\n  StreamToken,\n  TimeStub,\n  FeedPage,\n  type EventSource,\n  type DocumentT,\n} from \"./values\";\nexport {\n  FaunaAPIPaths,\n  FetchClient,\n  getDefaultHTTPClient,\n  HTTPClientOptions,\n  HTTPStreamRequest,\n  isHTTPResponse,\n  isStreamClient,\n  NodeHTTP2Client,\n  SupportedFaunaAPIPaths,\n  type HTTPClient,\n  type HTTPRequest,\n  type HTTPResponse,\n  type HTTPStreamClient,\n  type StreamAdapter,\n} from \"./http-client\";\n", "import { HTTPClient, HTTPStreamClient } from \"./http-client\";\nimport type { ValueFormat } from \"./wire-protocol\";\n\n/**\n * Configuration for a client. The options provided are used as the\n * default options for each query.\n */\nexport interface ClientConfiguration {\n  /**\n   * Time in milliseconds beyond {@link ClientConfiguration.query_timeout_ms} at\n   * which the client will abort a request if it has not received a response.\n   * The default is 5000 ms, which should account for network latency for most\n   * clients. The value must be greater than zero. The closer to zero the value\n   * is, the more likely the client is to abort the request before the server\n   * can report a legitimate response or error.\n   */\n  client_timeout_buffer_ms?: number;\n\n  /**\n   * The {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL} of Fauna to call. See {@link endpoints} for some default options.\n   */\n  endpoint?: URL;\n\n  /**\n   * Determines the encoded format expected for the query `arguments` field, and\n   * the `data` field of a successful response.\n   * @remarks **Note, it is very unlikely you need to change this value from its\n   * default.**\n   * The default format is \"tagged\", which specifies that the driver transmits\n   * type information over the wire. Type information allows the driver and\n   * Fauna to distinguish between types such as int\" and \"long\" which do not\n   * have a standard way of distinguishing in JSON.\n   * Rare use cases can also deal with standard JSON by setting the value to\n   * \"simple\". Note that the types enocodable in standard JSON are a subset of\n   * the types encodable in the default \"tagged\" format.\n   * It is not recommended that users use the \"simple\" format as you will lose\n   * the typing of your data. e.g. a \"Date\" will no longer be recognized by the\n   * Fauna as a \"Date\", but will instead be treated as a string.\n   */\n  format?: ValueFormat;\n\n  /**\n   * Time in milliseconds the client will keep an HTTP2 session open after all\n   * requests are completed. The default is 5000 ms.\n   */\n  http2_session_idle_ms?: number;\n\n  /**\n   * The maximum number of HTTP2 streams to execute in parallel\n   * to Fauna per HTTP2 session.\n   * Only relevant to certain HTTP2 clients.\n   * @remarks\n   * Relevant to clients using the {@link NodeHTTP2Client} provided,\n   * or any custom HTTP2Clients you implement that support this feature.\n   */\n  http2_max_streams?: number;\n\n  /**\n   * When true will keep executing a request even if the page\n   * that fired the request is no longer executing. Only relevant\n   * to underlying clients using the {@link https://fetch.spec.whatwg.org/ | Fetch standard}.\n   * By default set to false.\n   * @remarks\n   * Relevant to clients using the {@link FetchClient} provided,\n   * or any custom HTTP Clients you implement using the Fetch standard.\n   */\n  fetch_keepalive?: boolean;\n\n  /**\n   * A secret for your Fauna DB, used to authorize your queries.\n   * @see https://docs.fauna.com/fauna/current/security/keys\n   */\n  secret?: string;\n\n  // Query options\n\n  /**\n   * The timeout of each query, in milliseconds. This controls the maximum amount of\n   * time Fauna will execute your query before marking it failed. The default is 5000 ms.\n   */\n  query_timeout_ms?: number;\n\n  /**\n   * If true, unconditionally run the query as strictly serialized.\n   * This affects read-only transactions. Transactions which write\n   * will always be strictly serialized.\n   */\n  linearized?: boolean;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#long | Fauna longs} to.\n   * Use 'number' to deserialize longs to number. Use 'bigint' to deserialize to bigint. Defaults to 'number'.\n   * Note, for extremely large maginitude numbers Javascript's number will lose precision; as Javascript's\n   * 'number' can only support +/- 2^53-1 whereas Fauna's long is 64 bit. If this is detected, a warning will\n   * be logged to the console and precision loss will occur.\n   * If your application uses extremely large magnitude numbers use 'bigint'.\n   */\n  long_type?: \"number\" | \"bigint\";\n\n  /**\n   * The max number of times to retry the query if contention is encountered.\n   */\n  max_contention_retries?: number;\n\n  /**\n   * Tags provided back via logging and telemetry.\n   */\n  query_tags?: { [key: string]: string };\n\n  /**\n   * A traceparent provided back via logging and telemetry.\n   * Must match format: https://www.w3.org/TR/trace-context/#traceparent-header\n   */\n  traceparent?: string;\n\n  /**\n   * Enable or disable typechecking of the query before evaluation. If no value\n   * is provided, the value of `typechecked` in the database configuration will\n   * be used.\n   */\n  typecheck?: boolean;\n\n  /**\n   * Enable or disable performance hints. Defaults to disabled.\n   * The QueryInfo object includes performance hints in the `summary` field, which is a\n   * top-level field in the response object.\n   */\n  performance_hints?: boolean;\n\n  /**\n   * Max attempts for retryable exceptions. Default is 3.\n   */\n  max_attempts?: number;\n\n  /**\n   * Max backoff between retries. Default is 20 seconds.\n   */\n  max_backoff?: number;\n}\n\n/**\n * An extensible interface for a set of Fauna endpoints.\n * @remarks Leverage the `[key: string]: URL;` field to extend to other endpoints.\n */\nexport interface Endpoints {\n  /** Fauna's default endpoint. */\n  default: URL;\n\n  /**\n   * An endpoint for interacting with local instance of Fauna (e.g. one running in a local docker container).\n   */\n  local: URL;\n\n  /**\n   * An alias for local.\n   */\n  localhost: URL;\n\n  /**\n   * Any other endpoint you want your client to support. For example, if you run all requests through a proxy\n   * configure it here. Most clients will not need to leverage this ability.\n   */\n  [key: string]: URL;\n}\n\n/**\n * Configuration for a streaming client. This typically comes from the `Client`\n * instance configuration.\n */\nexport type StreamClientConfiguration = {\n  /**\n   * The underlying {@link HTTPStreamClient} that will execute the actual HTTP calls\n   */\n  httpStreamClient: HTTPStreamClient;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#long | Fauna longs} to.\n   *\n   * @see {@link ClientConfiguration.long_type}\n   */\n  long_type: \"number\" | \"bigint\";\n\n  /**\n   * Max attempts for retryable exceptions.\n   */\n  max_attempts: number;\n\n  /**\n   * Max backoff between retries.\n   */\n  max_backoff: number;\n\n  /**\n   * A secret for your Fauna DB, used to authorize your queries.\n   * @see https://docs.fauna.com/fauna/current/security/keys\n   */\n  secret: string;\n\n  /**\n   * Indicates if stream should include \"status\" events, periodic events that\n   * update the client with the latest valid timestamp (in the event of a\n   * dropped connection) as well as metrics about the cost of maintaining\n   * the stream other than the cost of the received events.\n   */\n  status_events?: boolean;\n\n  /**\n   * The last seen event cursor to resume the stream from. When provided, the\n   * stream will start from the given cursor position (exclusively).\n   */\n  cursor?: string;\n};\n\n/**\n * Configuration for an event feed client.\n */\nexport type FeedClientConfiguration = Required<\n  Pick<\n    ClientConfiguration,\n    | \"long_type\"\n    | \"max_attempts\"\n    | \"max_backoff\"\n    | \"client_timeout_buffer_ms\"\n    | \"query_timeout_ms\"\n    | \"secret\"\n  >\n> & {\n  /**\n   * The underlying {@link HTTPClient} that will execute the actual HTTP calls\n   */\n  httpClient: HTTPClient;\n\n  /**\n   * The starting timestamp of the event feed, exclusive. If set, Fauna will return events starting after\n    the timestamp.\n   */\n  start_ts?: number;\n\n  /**\n   * The starting event cursor, exclusive. If set, Fauna will return events starting after the cursor.\n   */\n  cursor?: string;\n\n  /**\n   * Maximum number of events returned per page.\n   * Must be in the range 1 to 16000 (inclusive).\n   * Defaults to 16.\n   */\n  page_size?: number;\n};\n\n/**\n * A extensible set of endpoints for calling Fauna.\n * @remarks Most clients will will not need to extend this set.\n * @example\n * ## To Extend\n * ```typescript\n *   // add to the endpoints constant\n *   endpoints.myProxyEndpoint = new URL(\"https://my.proxy.url\");\n * ```\n */\nexport const endpoints: Endpoints = {\n  default: new URL(\"https://db.fauna.com\"),\n  local: new URL(\"http://localhost:8443\"),\n  localhost: new URL(\"http://localhost:8443\"),\n};\n", "import type {\n  ConstraintFailure,\n  QueryFailure,\n  QueryInfo,\n  QueryStats,\n  QueryValue,\n} from \"./wire-protocol\";\n\n/**\n * A common error base class for all other errors.\n */\nexport abstract class FaunaError extends Error {\n  constructor(...args: any[]) {\n    super(...args);\n  }\n}\n\n/**\n * An error representing a query failure returned by Fauna.\n */\nexport class ServiceError extends FaunaError {\n  /**\n   * The HTTP Status Code of the error.\n   */\n  readonly httpStatus?: number;\n  /**\n   * A code for the error. Codes indicate the cause of the error.\n   * It is safe to write programmatic logic against the code. They are\n   * part of the API contract.\n   */\n  readonly code: string;\n  /**\n   * Details about the query sent along with the response\n   */\n  readonly queryInfo?: QueryInfo;\n  /**\n   * A machine readable description of any constraint failures encountered by the query.\n   * Present only if this query encountered constraint failures.\n   */\n  readonly constraint_failures?: Array<ConstraintFailure>;\n\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure.error.message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceError);\n    }\n\n    this.name = \"ServiceError\";\n    this.code = failure.error.code;\n    this.httpStatus = httpStatus;\n\n    const info: QueryInfo = {\n      txn_ts: failure.txn_ts,\n      summary: failure.summary,\n      query_tags: failure.query_tags,\n      stats: failure.stats,\n    };\n    this.queryInfo = info;\n\n    this.constraint_failures = failure.error.constraint_failures;\n  }\n}\n\n/**\n * An error response that is the result of the query failing during execution.\n * QueryRuntimeError's occur when a bug in your query causes an invalid execution\n * to be requested.\n * The 'code' field will vary based on the specific error cause.\n */\nexport class QueryRuntimeError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryRuntimeError);\n    }\n    this.name = \"QueryRuntimeError\";\n    // TODO trace, txn_ts, and stats not yet returned for QueryRuntimeError\n    // flip to check for those rather than a specific code.\n  }\n}\n\n/**\n * An error due to a \"compile-time\" check of the query\n * failing.\n */\nexport class QueryCheckError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"QueryCheckError\";\n  }\n}\n\n/**\n * An error due to an invalid request to Fauna. Either the request body was not\n * valid JSON or did not conform to the API specification\n */\nexport class InvalidRequestError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InvalidRequestError);\n    }\n    this.name = \"InvalidRequestError\";\n  }\n}\n\n/**\n * A runtime error due to failing schema constraints.\n */\nexport class ConstraintFailureError extends ServiceError {\n  /**\n   * The list of constraints that failed.\n   */\n  readonly constraint_failures: Array<ConstraintFailure>;\n\n  constructor(\n    failure: QueryFailure & {\n      error: { constraint_failures: Array<ConstraintFailure> };\n    },\n    httpStatus?: number,\n  ) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"ConstraintFailureError\";\n    this.constraint_failures = failure.error.constraint_failures;\n  }\n}\n\n/**\n * An error due to calling the FQL `abort` function.\n */\nexport class AbortError extends ServiceError {\n  /**\n   * The user provided value passed to the originating `abort()` call.\n   * Present only when the query encountered an `abort()` call, which is denoted\n   * by the error code `\"abort\"`\n   */\n  readonly abort: QueryValue;\n\n  constructor(\n    failure: QueryFailure & { error: { abort: QueryValue } },\n    httpStatus?: number,\n  ) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"AbortError\";\n    this.abort = failure.error.abort;\n  }\n}\n\n/**\n * AuthenticationError indicates invalid credentials were\n * used.\n */\nexport class AuthenticationError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AuthenticationError);\n    }\n    this.name = \"AuthenticationError\";\n  }\n}\n\n/**\n * AuthorizationError indicates the credentials used do not have\n * permission to perform the requested action.\n */\nexport class AuthorizationError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AuthorizationError);\n    }\n    this.name = \"AuthorizationError\";\n  }\n}\n\n/**\n * An error due to a contended transaction.\n */\nexport class ContendedTransactionError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InvalidRequestError);\n    }\n    this.name = \"ContendedTransactionError\";\n  }\n}\n\n/**\n * ThrottlingError indicates some capacity limit was exceeded\n * and thus the request could not be served.\n */\nexport class ThrottlingError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ThrottlingError);\n    }\n    this.name = \"ThrottlingError\";\n  }\n}\n\n/**\n * A failure due to the query timeout being exceeded.\n *\n * This error can have one of two sources:\n *     1. Fauna is behaving expectedly, but the query timeout provided was too\n *        aggressive and lower than the query's expected processing time.\n *     2. Fauna was not available to service the request before the timeout was\n *        reached.\n *\n * In either case, consider increasing the `query_timeout_ms` configuration for\n * your client.\n */\nexport class QueryTimeoutError extends ServiceError {\n  /**\n   * Statistics regarding the query.\n   *\n   * TODO: Deprecate this `stats` field. All `ServiceError`s already provide\n   * access to stats through `queryInfo.stats`\n   */\n  readonly stats?: QueryStats;\n\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryTimeoutError);\n    }\n    this.name = \"QueryTimeoutError\";\n    this.stats = failure.stats;\n  }\n}\n\n/**\n * ServiceInternalError indicates Fauna failed unexpectedly.\n */\nexport class ServiceInternalError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceInternalError);\n    }\n    this.name = \"ServiceInternalError\";\n  }\n}\n\n/**\n * An error representing a failure internal to the client, itself.\n * This indicates Fauna was never called - the client failed internally\n * prior to sending the request.\n */\nexport class ClientError extends FaunaError {\n  constructor(message: string, options?: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ClientError);\n    }\n    this.name = \"ClientError\";\n  }\n}\n\n/**\n * An error thrown if you try to call the client after it has been closed.\n */\nexport class ClientClosedError extends FaunaError {\n  constructor(message: string, options?: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ClientClosedError);\n    }\n    this.name = \"ClientClosedError\";\n  }\n}\n\n/**\n * An error representing a failure due to the network.\n * This indicates Fauna was never reached.\n */\nexport class NetworkError extends FaunaError {\n  constructor(message: string, options: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, NetworkError);\n    }\n    this.name = \"NetworkError\";\n  }\n}\n\n/**\n * An error representing a HTTP failure - but one not directly\n * emitted by Fauna.\n */\nexport class ProtocolError extends FaunaError {\n  /**\n   * The HTTP Status Code of the error.\n   */\n  readonly httpStatus: number;\n\n  constructor(error: { message: string; httpStatus: number }) {\n    super(error.message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ProtocolError);\n    }\n\n    this.name = \"ProtocolError\";\n    this.httpStatus = error.httpStatus;\n  }\n}\n\nexport const getServiceError = (\n  failure: QueryFailure,\n  httpStatus?: number,\n): ServiceError => {\n  const failureCode = failure.error.code;\n\n  switch (failureCode) {\n    case \"invalid_query\":\n      return new QueryCheckError(failure, httpStatus);\n\n    case \"invalid_request\":\n      return new InvalidRequestError(failure, httpStatus);\n\n    case \"abort\":\n      if (failure.error.abort !== undefined) {\n        return new AbortError(\n          failure as QueryFailure & { error: { abort: QueryValue } },\n          httpStatus,\n        );\n      }\n      break;\n\n    case \"constraint_failure\":\n      if (failure.error.constraint_failures !== undefined) {\n        return new ConstraintFailureError(\n          failure as QueryFailure & {\n            error: { constraint_failures: Array<ConstraintFailure> };\n          },\n          httpStatus,\n        );\n      }\n      break;\n\n    case \"unauthorized\":\n      return new AuthenticationError(failure, httpStatus);\n\n    case \"forbidden\":\n      return new AuthorizationError(failure, httpStatus);\n\n    case \"contended_transaction\":\n      return new ContendedTransactionError(failure, httpStatus);\n\n    case \"limit_exceeded\":\n      return new ThrottlingError(failure, httpStatus);\n\n    case \"time_out\":\n      return new QueryTimeoutError(failure, httpStatus);\n\n    case \"internal_error\":\n      return new ServiceInternalError(failure, httpStatus);\n  }\n\n  return new QueryRuntimeError(failure, httpStatus);\n};\n", "/**\n * Readonly object representing the paths of the Fauna API to be used\n * with HTTP clients.\n */\nexport const FaunaAPIPaths = {\n  QUERY: \"/query/1\",\n  STREAM: \"/stream/1\",\n  EVENT_FEED: \"/feed/1\",\n} as const;\n\nexport type SupportedFaunaAPIPaths =\n  (typeof FaunaAPIPaths)[keyof typeof FaunaAPIPaths];\n", "/** following reference needed to include types for experimental fetch API in Node */\n/// <reference lib=\"dom\" />\n\nimport { getServiceError, NetworkError } from \"../errors\";\nimport { QueryFailure, QueryRequest } from \"../wire-protocol\";\nimport { FaunaAPIPaths } from \"./paths\";\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPRequest,\n  HTTPResponse,\n  HTTPStreamRequest,\n  HTTPStreamClient,\n  StreamAdapter,\n} from \"./http-client\";\n\n/**\n * An implementation for {@link HTTPClient} that uses the native fetch API\n */\nexport class FetchClient implements HTTPClient, HTTPStreamClient {\n  #baseUrl: string;\n  #defaultRequestPath = FaunaAPIPaths.QUERY;\n  #defaultStreamPath = FaunaAPIPaths.STREAM;\n  #keepalive: boolean;\n\n  constructor({ url, fetch_keepalive }: HTTPClientOptions) {\n    this.#baseUrl = url;\n    this.#keepalive = fetch_keepalive;\n  }\n\n  #resolveURL(path: string): string {\n    return new URL(path, this.#baseUrl).toString();\n  }\n\n  /** {@inheritDoc HTTPClient.request} */\n  async request<T = QueryRequest>({\n    data,\n    headers: requestHeaders,\n    method,\n    client_timeout_ms,\n    path = this.#defaultRequestPath,\n  }: HTTPRequest<T>): Promise<HTTPResponse> {\n    const signal =\n      AbortSignal.timeout === undefined\n        ? (() => {\n            const controller = new AbortController();\n            const signal = controller.signal;\n            setTimeout(() => controller.abort(), client_timeout_ms);\n            return signal;\n          })()\n        : AbortSignal.timeout(client_timeout_ms);\n\n    const response = await fetch(this.#resolveURL(path), {\n      method,\n      headers: { ...requestHeaders, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n      signal,\n      keepalive: this.#keepalive,\n    }).catch((error) => {\n      throw new NetworkError(\"The network connection encountered a problem.\", {\n        cause: error,\n      });\n    });\n\n    const status = response.status;\n\n    const responseHeaders: Record<string, string> = {};\n    response.headers.forEach((value, key) => (responseHeaders[key] = value));\n\n    const body = await response.text();\n\n    return {\n      status,\n      body,\n      headers: responseHeaders,\n    };\n  }\n\n  /** {@inheritDoc HTTPStreamClient.stream} */\n  stream({\n    data,\n    headers: requestHeaders,\n    method,\n    path = this.#defaultStreamPath,\n  }: HTTPStreamRequest): StreamAdapter {\n    const request = new Request(this.#resolveURL(path), {\n      method,\n      headers: { ...requestHeaders, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n      keepalive: this.#keepalive,\n    });\n\n    const abortController = new AbortController();\n\n    const options = {\n      signal: abortController.signal,\n    };\n\n    async function* reader() {\n      const response = await fetch(request, options).catch((error) => {\n        throw new NetworkError(\n          \"The network connection encountered a problem.\",\n          {\n            cause: error,\n          },\n        );\n      });\n      const status = response.status;\n      if (!(status >= 200 && status < 400)) {\n        const failure: QueryFailure = await response.json();\n        throw getServiceError(failure, status);\n      }\n\n      const body = response.body;\n      if (!body) {\n        throw new Error(\"Response body is undefined.\");\n      }\n      const reader = body.getReader();\n\n      try {\n        for await (const line of readLines(reader)) {\n          yield line;\n        }\n      } catch (error) {\n        throw new NetworkError(\n          \"The network connection encountered a problem while streaming events.\",\n          { cause: error },\n        );\n      }\n    }\n\n    return {\n      read: reader(),\n      close: () => {\n        abortController.abort(\"Stream closed by the client.\");\n      },\n    };\n  }\n\n  /** {@inheritDoc HTTPClient.close} */\n  close() {\n    // no actions at this time\n  }\n}\n\n/**\n * Get individual lines from the stream\n *\n * The stream may be broken into arbitrary chunks, but the events are delimited by a newline character.\n *\n * @param reader - The stream reader\n */\nasync function* readLines(reader: ReadableStreamDefaultReader<Uint8Array>) {\n  const textDecoder = new TextDecoder();\n  let partOfLine = \"\";\n  for await (const chunk of readChunks(reader)) {\n    const chunkText = textDecoder.decode(chunk);\n    const chunkLines = (partOfLine + chunkText).split(\"\\n\");\n\n    // Yield all complete lines\n    for (let i = 0; i < chunkLines.length - 1; i++) {\n      yield chunkLines[i].trim();\n    }\n\n    // Store the partial line\n    partOfLine = chunkLines[chunkLines.length - 1];\n  }\n\n  // Yield the remaining partial line if any\n  if (partOfLine.trim() !== \"\") {\n    yield partOfLine;\n  }\n}\n\nasync function* readChunks(reader: ReadableStreamDefaultReader<Uint8Array>) {\n  let done = false;\n  do {\n    const readResult = await reader.read();\n    if (readResult.value !== undefined) {\n      yield readResult.value;\n    }\n    done = readResult.done;\n  } while (!done);\n}\n", "let http2: any;\ntry {\n  http2 = require(\"node:http2\");\n} catch (_) {\n  http2 = undefined;\n}\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPRequest,\n  HTTPResponse,\n  HTTPStreamClient,\n  HTTPStreamRequest,\n  StreamAdapter,\n} from \"./http-client\";\nimport { NetworkError, getServiceError } from \"../errors\";\nimport { QueryFailure, QueryRequest } from \"../wire-protocol\";\nimport { FaunaAPIPaths } from \"./paths\";\n\n// alias http2 types\ntype ClientHttp2Session = any;\ntype ClientHttp2Stream = any;\ntype IncomingHttpHeaders = any;\ntype IncomingHttpStatusHeader = any;\ntype OutgoingHttpHeaders = any;\n\n/**\n * An implementation for {@link HTTPClient} that uses the node http package\n */\nexport class NodeHTTP2Client implements HTTPClient, HTTPStreamClient {\n  static #clients: Map<string, NodeHTTP2Client> = new Map();\n\n  #http2_session_idle_ms: number;\n  #http2_max_streams: number;\n  #url: string;\n  #numberOfUsers = 0;\n  #session: ClientHttp2Session | null;\n\n  #defaultRequestPath = FaunaAPIPaths.QUERY;\n  #defaultStreamPath = FaunaAPIPaths.STREAM;\n\n  private constructor({\n    http2_session_idle_ms,\n    url,\n    http2_max_streams,\n  }: HTTPClientOptions) {\n    if (http2 === undefined) {\n      throw new Error(\"Your platform does not support Node's http2 library\");\n    }\n\n    this.#http2_session_idle_ms = http2_session_idle_ms;\n    this.#http2_max_streams = http2_max_streams;\n    this.#url = url;\n    this.#session = null;\n  }\n\n  /**\n   * Gets a {@link NodeHTTP2Client} matching the {@link HTTPClientOptions}\n   * @param httpClientOptions - the {@link HTTPClientOptions}\n   * @returns a {@link NodeHTTP2Client} matching the {@link HTTPClientOptions}\n   */\n  static getClient(httpClientOptions: HTTPClientOptions): NodeHTTP2Client {\n    const clientKey = NodeHTTP2Client.#getClientKey(httpClientOptions);\n    if (!NodeHTTP2Client.#clients.has(clientKey)) {\n      NodeHTTP2Client.#clients.set(\n        clientKey,\n        new NodeHTTP2Client(httpClientOptions),\n      );\n    }\n    // we know that we have a client here\n    const client = NodeHTTP2Client.#clients.get(clientKey) as NodeHTTP2Client;\n    client.#numberOfUsers++;\n    return client;\n  }\n\n  static #getClientKey({ http2_session_idle_ms, url }: HTTPClientOptions) {\n    return `${url}|${http2_session_idle_ms}`;\n  }\n\n  /** {@inheritDoc HTTPClient.request} */\n  async request<T = QueryRequest>(req: HTTPRequest<T>): Promise<HTTPResponse> {\n    let retryCount = 0;\n    let memoizedError: any;\n    do {\n      try {\n        return await this.#doRequest(req);\n      } catch (error: any) {\n        // see https://github.com/nodejs/node/pull/42190/files\n        // and https://github.com/nodejs/help/issues/2105\n        //\n        // TLDR; In Node, there is a race condition between handling\n        // GOAWAY and submitting requests - that can cause\n        // clients that safely handle go away to submit\n        // requests after a GOAWAY was received anyway.\n        //\n        // technical explanation: node HTTP2 request gets put\n        // on event queue before it is actually executed. In the iterim,\n        // a GOAWAY can come and cause the request to fail\n        // with a GOAWAY.\n        if (error?.code !== \"ERR_HTTP2_GOAWAY_SESSION\") {\n          throw new NetworkError(\n            \"The network connection encountered a problem.\",\n            {\n              cause: error,\n            },\n          );\n        }\n        memoizedError = error;\n        retryCount++;\n      }\n    } while (retryCount < 3);\n    throw new NetworkError(\"The network connection encountered a problem.\", {\n      cause: memoizedError,\n    });\n  }\n\n  /** {@inheritDoc HTTPStreamClient.stream} */\n  stream(req: HTTPStreamRequest): StreamAdapter {\n    return this.#doStream(req);\n  }\n\n  /** {@inheritDoc HTTPClient.close} */\n  close() {\n    // defend against redundant close calls\n    if (this.isClosed()) {\n      return;\n    }\n    this.#numberOfUsers--;\n    if (this.#numberOfUsers === 0 && this.#session && !this.#session.closed) {\n      this.#session.close();\n    }\n  }\n\n  /**\n   * @returns true if this client has been closed, false otherwise.\n   */\n  isClosed(): boolean {\n    return this.#numberOfUsers === 0;\n  }\n\n  #closeForAll() {\n    this.#numberOfUsers = 0;\n    if (this.#session && !this.#session.closed) {\n      this.#session.close();\n    }\n  }\n\n  #connect() {\n    // create the session if it does not exist or is closed\n    if (!this.#session || this.#session.closed || this.#session.destroyed) {\n      const newSession: ClientHttp2Session = http2\n        .connect(this.#url, {\n          peerMaxConcurrentStreams: this.#http2_max_streams,\n        })\n        .once(\"error\", () => this.#closeForAll())\n        .once(\"goaway\", () => this.#closeForAll());\n\n      newSession.setTimeout(this.#http2_session_idle_ms, () => {\n        this.#closeForAll();\n      });\n\n      this.#session = newSession;\n    }\n    return this.#session;\n  }\n\n  #doRequest<T = QueryRequest>({\n    client_timeout_ms,\n    data: requestData,\n    headers: requestHeaders,\n    method,\n    path = this.#defaultRequestPath,\n  }: HTTPRequest<T>): Promise<HTTPResponse> {\n    return new Promise<HTTPResponse>((resolvePromise, rejectPromise) => {\n      let req: ClientHttp2Stream;\n      const onResponse = (\n        http2ResponseHeaders: IncomingHttpHeaders & IncomingHttpStatusHeader,\n      ) => {\n        const status = Number(\n          http2ResponseHeaders[http2.constants.HTTP2_HEADER_STATUS],\n        );\n        let responseData = \"\";\n\n        // append response data to the data string every time we receive new\n        // data chunks in the response\n        req.on(\"data\", (chunk: string) => {\n          responseData += chunk;\n        });\n\n        // Once the response is finished, resolve the promise\n        req.on(\"end\", () => {\n          resolvePromise({\n            status,\n            body: responseData,\n            headers: http2ResponseHeaders,\n          });\n        });\n      };\n\n      try {\n        const httpRequestHeaders: OutgoingHttpHeaders = {\n          ...requestHeaders,\n          [http2.constants.HTTP2_HEADER_PATH]: path,\n          [http2.constants.HTTP2_HEADER_METHOD]: method,\n        };\n\n        const session = this.#connect();\n        req = session\n          .request(httpRequestHeaders)\n          .setEncoding(\"utf8\")\n          .on(\"error\", (error: any) => {\n            rejectPromise(error);\n          })\n          .on(\"response\", onResponse);\n\n        req.write(JSON.stringify(requestData), \"utf8\");\n\n        // req.setTimeout must be called before req.end()\n        req.setTimeout(client_timeout_ms, () => {\n          req.destroy(new Error(`Client timeout`));\n        });\n\n        req.end();\n      } catch (error) {\n        rejectPromise(error);\n      }\n    });\n  }\n\n  /** {@inheritDoc HTTPStreamClient.stream} */\n  #doStream({\n    data: requestData,\n    headers: requestHeaders,\n    method,\n    path = this.#defaultStreamPath,\n  }: HTTPStreamRequest): StreamAdapter {\n    let resolveChunk: (chunk: string[]) => void;\n    let rejectChunk: (reason: any) => void;\n\n    const setChunkPromise = () =>\n      new Promise<string[]>((res, rej) => {\n        resolveChunk = res;\n        rejectChunk = rej;\n      });\n\n    let chunkPromise = setChunkPromise();\n\n    let req: ClientHttp2Stream;\n    const onResponse = (\n      http2ResponseHeaders: IncomingHttpHeaders & IncomingHttpStatusHeader,\n    ) => {\n      const status = Number(\n        http2ResponseHeaders[http2.constants.HTTP2_HEADER_STATUS],\n      );\n      if (!(status >= 200 && status < 400)) {\n        // Get the error body and then throw an error\n        let responseData = \"\";\n\n        // append response data to the data string every time we receive new\n        // data chunks in the response\n        req.on(\"data\", (chunk: string) => {\n          responseData += chunk;\n        });\n\n        // Once the response is finished, resolve the promise\n        req.on(\"end\", () => {\n          try {\n            const failure: QueryFailure = JSON.parse(responseData);\n            rejectChunk(getServiceError(failure, status));\n          } catch (error) {\n            rejectChunk(\n              new NetworkError(\"Could not process query failure.\", {\n                cause: error,\n              }),\n            );\n          }\n        });\n      } else {\n        let partOfLine = \"\";\n\n        // append response data to the data string every time we receive new\n        // data chunks in the response\n        req.on(\"data\", (chunk: string) => {\n          const chunkLines = (partOfLine + chunk).split(\"\\n\");\n\n          // Yield all complete lines\n          resolveChunk(chunkLines.map((s) => s.trim()).slice(0, -1));\n          chunkPromise = setChunkPromise();\n\n          // Store the partial line\n          partOfLine = chunkLines[chunkLines.length - 1];\n        });\n\n        // Once the response is finished, resolve the promise\n        req.on(\"end\", () => {\n          resolveChunk([partOfLine]);\n        });\n      }\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    async function* reader(): AsyncGenerator<string> {\n      const httpRequestHeaders: OutgoingHttpHeaders = {\n        ...requestHeaders,\n        [http2.constants.HTTP2_HEADER_PATH]: path,\n        [http2.constants.HTTP2_HEADER_METHOD]: method,\n      };\n\n      const session = self.#connect();\n      req = session\n        .request(httpRequestHeaders)\n        .setEncoding(\"utf8\")\n        .on(\"error\", (error: any) => {\n          rejectChunk(error);\n        })\n        .on(\"response\", onResponse);\n\n      const body = JSON.stringify(requestData);\n\n      req.write(body, \"utf8\");\n\n      req.end();\n\n      while (true) {\n        const chunks = await chunkPromise;\n        for (const chunk of chunks) {\n          yield chunk;\n        }\n      }\n    }\n\n    return {\n      read: reader(),\n      close: () => {\n        if (req) {\n          req.close();\n        }\n      },\n    };\n  }\n}\n", "import { FetchClient } from \"./fetch-client\";\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPResponse,\n  HTTPStreamClient,\n} from \"./http-client\";\nimport { NodeHTTP2Client } from \"./node-http2-client\";\n\nexport * from \"./paths\";\nexport * from \"./fetch-client\";\nexport * from \"./http-client\";\nexport * from \"./node-http2-client\";\n\nexport const getDefaultHTTPClient = (\n  options: HTTPClientOptions,\n): HTTPClient & HTTPStreamClient =>\n  nodeHttp2IsSupported()\n    ? NodeHTTP2Client.getClient(options)\n    : new FetchClient(options);\n\nexport const isHTTPResponse = (res: any): res is HTTPResponse =>\n  res instanceof Object && \"body\" in res && \"headers\" in res && \"status\" in res;\n\nexport const isStreamClient = (\n  client: Partial<HTTPStreamClient>,\n): client is HTTPStreamClient => {\n  return \"stream\" in client && typeof client.stream === \"function\";\n};\n\nexport const nodeHttp2IsSupported = () => {\n  if (\n    typeof process !== \"undefined\" &&\n    process &&\n    process.release?.name === \"node\"\n  ) {\n    try {\n      require(\"node:http2\");\n      return true;\n    } catch (_) {\n      return false;\n    }\n  }\n  return false;\n};\n", "import base64 from \"base64-js\";\n\nimport { ClientError } from \"./errors\";\nimport {\n  DateStub,\n  Document,\n  DocumentReference,\n  Module,\n  NamedDocument,\n  NamedDocumentReference,\n  TimeStub,\n  Page,\n  NullDocument,\n  EmbeddedSet,\n  StreamToken,\n} from \"./values\";\nimport {\n  QueryValue,\n  QueryInterpolation,\n  ObjectFragment,\n  ArrayFragment,\n  FQLFragment,\n  ValueFragment,\n  TaggedType,\n  TaggedLong,\n  TaggedInt,\n  TaggedDouble,\n  TaggedObject,\n  EncodedObject,\n  TaggedTime,\n  TaggedDate,\n  TaggedMod,\n  TaggedRef,\n  TaggedBytes,\n} from \"./wire-protocol\";\nimport { Query, QueryArgument, QueryArgumentObject } from \"./query-builder\";\n\nexport interface DecodeOptions {\n  long_type: \"number\" | \"bigint\";\n}\n\n/**\n * TaggedType provides the encoding/decoding of the Fauna Tagged Type formatting\n */\nexport class TaggedTypeFormat {\n  /**\n   * Encode the value to the Tagged Type format for Fauna\n   *\n   * @param input - value that will be encoded\n   * @returns Map of result\n   */\n  static encode(input: QueryArgument): TaggedType {\n    return encode(input);\n  }\n\n  /**\n   * Encode the value to a QueryInterpolation to send to Fauna\n   *\n   * @param input - value that will be encoded\n   * @returns Map of result\n   */\n  static encodeInterpolation(input: QueryArgument): QueryInterpolation {\n    return encodeInterpolation(input);\n  }\n\n  /**\n   * Decode the JSON string result from Fauna to remove Tagged Type formatting.\n   *\n   * @param input - JSON string result from Fauna\n   * @returns object of result of FQL query\n   */\n  static decode(input: string, decodeOptions: DecodeOptions): any {\n    return JSON.parse(input, (_, value: any) => {\n      if (value == null) return null;\n      if (value[\"@mod\"]) {\n        return new Module(value[\"@mod\"]);\n      } else if (value[\"@doc\"]) {\n        // WIP: The string-based ref is being removed from the API\n        if (typeof value[\"@doc\"] === \"string\") {\n          const [modName, id] = value[\"@doc\"].split(\":\");\n          return new DocumentReference({ coll: modName, id: id });\n        }\n        // if not a docref string, then it is an object.\n        const obj = value[\"@doc\"];\n        if (obj.id) {\n          return new Document(obj);\n        } else {\n          return new NamedDocument(obj);\n        }\n      } else if (value[\"@ref\"]) {\n        const obj = value[\"@ref\"];\n        let ref: DocumentReference | NamedDocumentReference;\n        if (obj.id) {\n          ref = new DocumentReference(obj);\n        } else {\n          ref = new NamedDocumentReference(obj);\n        }\n        if (\"exists\" in obj && obj.exists === false) {\n          return new NullDocument(ref, obj.cause);\n        }\n        return ref;\n      } else if (value[\"@set\"]) {\n        if (typeof value[\"@set\"] === \"string\") {\n          return new EmbeddedSet(value[\"@set\"]);\n        }\n        return new Page(value[\"@set\"]);\n      } else if (value[\"@int\"]) {\n        return Number(value[\"@int\"]);\n      } else if (value[\"@long\"]) {\n        const bigInt = BigInt(value[\"@long\"]);\n        if (decodeOptions.long_type === \"number\") {\n          if (\n            bigInt > Number.MAX_SAFE_INTEGER ||\n            bigInt < Number.MIN_SAFE_INTEGER\n          ) {\n            console.warn(`Value is too large to be represented as a number. \\\nReturning as Number with loss of precision. Use long_type 'bigint' instead.`);\n          }\n          return Number(bigInt);\n        }\n        return bigInt;\n      } else if (value[\"@double\"]) {\n        return Number(value[\"@double\"]);\n      } else if (value[\"@date\"]) {\n        return DateStub.from(value[\"@date\"]);\n      } else if (value[\"@time\"]) {\n        return TimeStub.from(value[\"@time\"]);\n      } else if (value[\"@object\"]) {\n        return value[\"@object\"];\n      } else if (value[\"@stream\"]) {\n        return new StreamToken(value[\"@stream\"]);\n      } else if (value[\"@bytes\"]) {\n        return base64toBuffer(value[\"@bytes\"]);\n      }\n\n      return value;\n    });\n  }\n}\n\nexport const LONG_MIN = BigInt(\"-9223372036854775808\");\nexport const LONG_MAX = BigInt(\"9223372036854775807\");\nexport const INT_MIN = -(2 ** 31);\nexport const INT_MAX = 2 ** 31 - 1;\n\nconst encodeMap = {\n  bigint: (value: bigint): TaggedLong | TaggedInt => {\n    if (value < LONG_MIN || value > LONG_MAX) {\n      throw new RangeError(\n        \"BigInt value exceeds max magnitude for a 64-bit Fauna long. Use a 'number' to represent doubles beyond that limit.\",\n      );\n    }\n    if (value >= INT_MIN && value <= INT_MAX) {\n      return { \"@int\": value.toString() };\n    }\n    return {\n      \"@long\": value.toString(),\n    };\n  },\n  number: (value: number): TaggedDouble | TaggedInt | TaggedLong => {\n    if (\n      value === Number.POSITIVE_INFINITY ||\n      value === Number.NEGATIVE_INFINITY\n    ) {\n      throw new RangeError(`Cannot convert ${value} to a Fauna type.`);\n    }\n\n    if (!Number.isInteger(value)) {\n      return { \"@double\": value.toString() };\n    } else {\n      if (value >= INT_MIN && value <= INT_MAX) {\n        return { \"@int\": value.toString() };\n      } else if (Number.isSafeInteger(value)) {\n        return {\n          \"@long\": value.toString(),\n        };\n      }\n      return { \"@double\": value.toString() };\n    }\n  },\n  string: (value: string): string => {\n    return value;\n  },\n  object: (input: QueryArgumentObject): TaggedObject | EncodedObject => {\n    let wrapped = false;\n    const _out: EncodedObject = {};\n\n    for (const k in input) {\n      if (k.startsWith(\"@\")) {\n        wrapped = true;\n      }\n      if (input[k] !== undefined) {\n        _out[k] = encode(input[k]);\n      }\n    }\n    return wrapped ? { \"@object\": _out } : _out;\n  },\n  array: (input: QueryArgument[]): TaggedType[] => input.map(encode),\n  date: (dateValue: Date): TaggedTime => ({\n    \"@time\": dateValue.toISOString(),\n  }),\n  faunadate: (value: DateStub): TaggedDate => ({ \"@date\": value.dateString }),\n  faunatime: (value: TimeStub): TaggedTime => ({ \"@time\": value.isoString }),\n  module: (value: Module): TaggedMod => ({ \"@mod\": value.name }),\n  documentReference: (value: DocumentReference): TaggedRef => ({\n    \"@ref\": { id: value.id, coll: { \"@mod\": value.coll.name } },\n  }),\n  document: (value: Document): TaggedRef => ({\n    \"@ref\": { id: value.id, coll: { \"@mod\": value.coll.name } },\n  }),\n  namedDocumentReference: (value: NamedDocumentReference): TaggedRef => ({\n    \"@ref\": { name: value.name, coll: { \"@mod\": value.coll.name } },\n  }),\n  namedDocument: (value: NamedDocument): TaggedRef => ({\n    \"@ref\": { name: value.name, coll: { \"@mod\": value.coll.name } },\n  }),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  set: (value: Page<QueryValue> | EmbeddedSet) => {\n    throw new ClientError(\n      \"Page could not be encoded. Fauna does not accept encoded Set values, yet. Use Page.data and Page.after as arguments, instead.\",\n    );\n    // TODO: uncomment to encode Pages once core starts accepting `@set` tagged values\n    // if (value.data === undefined) {\n    //   // if a Page has no data, then it must still have an 'after' cursor\n    //   return { \"@set\": value.after };\n    // }\n    // return {\n    //   \"@set\": { data: encodeMap[\"array\"](value.data), after: value.after },\n    // };\n  },\n  // TODO: encode as a tagged value if provided as a query arg?\n  // streamToken: (value: StreamToken): TaggedStreamToken => ({ \"@stream\": value.token }),\n  streamToken: (value: StreamToken): string => value.token,\n  bytes: (value: ArrayBuffer | Uint8Array): TaggedBytes => ({\n    \"@bytes\": bufferToBase64(value),\n  }),\n};\n\nconst encode = (input: QueryArgument): TaggedType => {\n  switch (typeof input) {\n    case \"bigint\":\n      return encodeMap[\"bigint\"](input);\n    case \"string\":\n      return encodeMap[\"string\"](input);\n    case \"number\":\n      return encodeMap[\"number\"](input);\n    case \"boolean\":\n      return input;\n    case \"object\":\n      if (input == null) {\n        return null;\n      } else if (Array.isArray(input)) {\n        return encodeMap[\"array\"](input);\n      } else if (input instanceof Date) {\n        return encodeMap[\"date\"](input);\n      } else if (input instanceof DateStub) {\n        return encodeMap[\"faunadate\"](input);\n      } else if (input instanceof TimeStub) {\n        return encodeMap[\"faunatime\"](input);\n      } else if (input instanceof Module) {\n        return encodeMap[\"module\"](input);\n      } else if (input instanceof Document) {\n        // Document extends DocumentReference, so order is important here\n        return encodeMap[\"document\"](input);\n      } else if (input instanceof DocumentReference) {\n        return encodeMap[\"documentReference\"](input);\n      } else if (input instanceof NamedDocument) {\n        // NamedDocument extends NamedDocumentReference, so order is important here\n        return encodeMap[\"namedDocument\"](input);\n      } else if (input instanceof NamedDocumentReference) {\n        return encodeMap[\"namedDocumentReference\"](input);\n      } else if (input instanceof NullDocument) {\n        return encode(input.ref);\n      } else if (input instanceof Page) {\n        return encodeMap[\"set\"](input);\n      } else if (input instanceof EmbeddedSet) {\n        return encodeMap[\"set\"](input);\n      } else if (input instanceof StreamToken) {\n        return encodeMap[\"streamToken\"](input);\n      } else if (input instanceof Uint8Array || input instanceof ArrayBuffer) {\n        return encodeMap[\"bytes\"](input);\n      } else if (ArrayBuffer.isView(input)) {\n        throw new ClientError(\n          \"Error encoding TypedArray to Fauna Bytes. Convert your TypedArray to Uint8Array or ArrayBuffer before passing it to Fauna. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\",\n        );\n      } else if (input instanceof Query) {\n        throw new TypeError(\n          \"Cannot encode instance of type 'Query'. Try using TaggedTypeFormat.encodeInterpolation instead.\",\n        );\n      } else {\n        return encodeMap[\"object\"](input);\n      }\n    default:\n      // catch \"undefined\", \"symbol\", and \"function\"\n      throw new TypeError(\n        `Passing ${typeof input} as a QueryArgument is not supported`,\n      );\n  }\n  // anything here would be unreachable code\n};\n\nconst encodeInterpolation = (input: QueryArgument): QueryInterpolation => {\n  switch (typeof input) {\n    case \"bigint\":\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return encodeValueInterpolation(encode(input));\n    case \"object\":\n      if (\n        input == null ||\n        input instanceof Date ||\n        input instanceof DateStub ||\n        input instanceof TimeStub ||\n        input instanceof Module ||\n        input instanceof DocumentReference ||\n        input instanceof NamedDocumentReference ||\n        input instanceof Page ||\n        input instanceof EmbeddedSet ||\n        input instanceof StreamToken ||\n        input instanceof Uint8Array ||\n        input instanceof ArrayBuffer ||\n        ArrayBuffer.isView(input)\n      ) {\n        return encodeValueInterpolation(encode(input));\n      } else if (input instanceof NullDocument) {\n        return encodeInterpolation(input.ref);\n      } else if (input instanceof Query) {\n        return encodeQueryInterpolation(input);\n      } else if (Array.isArray(input)) {\n        return encodeArrayInterpolation(input);\n      } else {\n        return encodeObjectInterpolation(input);\n      }\n    default:\n      // catch \"undefined\", \"symbol\", and \"function\"\n      throw new TypeError(\n        `Passing ${typeof input} as a QueryArgument is not supported`,\n      );\n  }\n};\n\nconst encodeObjectInterpolation = (\n  input: QueryArgumentObject,\n): ObjectFragment => {\n  const _out: EncodedObject = {};\n\n  for (const k in input) {\n    if (input[k] !== undefined) {\n      _out[k] = encodeInterpolation(input[k]);\n    }\n  }\n  return { object: _out };\n};\n\nconst encodeArrayInterpolation = (\n  input: Array<QueryArgument>,\n): ArrayFragment => {\n  const encodedItems = input.map(encodeInterpolation);\n  return { array: encodedItems };\n};\n\nconst encodeQueryInterpolation = (value: Query): FQLFragment => value.encode();\n\nconst encodeValueInterpolation = (value: TaggedType): ValueFragment => ({\n  value,\n});\n\nfunction base64toBuffer(value: string): Uint8Array {\n  return base64.toByteArray(value);\n}\n\nfunction bufferToBase64(value: ArrayBuffer | Uint8Array): string {\n  const arr: Uint8Array =\n    value instanceof Uint8Array ? value : new Uint8Array(value);\n\n  return base64.fromByteArray(arr);\n}\n", "// Date and Time expressions\n\nconst yearpart = /(?:\\d{4}|[\\u2212-]\\d{4,}|\\+\\d{5,})/;\nconst monthpart = /(?:0[1-9]|1[0-2])/;\nconst daypart = /(?:0[1-9]|[12]\\d|3[01])/;\nconst hourpart = /(?:[01][0-9]|2[0-3])/;\nconst minsecpart = /(?:[0-5][0-9])/;\nconst decimalpart = /(?:\\.\\d+)/;\n\nconst datesplit = new RegExp(\n  `(${yearpart.source}-(${monthpart.source})-(${daypart.source}))`\n);\n\nconst timesplit = new RegExp(\n  `(${hourpart.source}:${minsecpart.source}:${minsecpart.source}${decimalpart.source}?)`\n);\n\nconst zonesplit = new RegExp(\n  `([zZ]|[+\\u2212-]${hourpart.source}(?::?${minsecpart.source}|:${minsecpart.source}:${minsecpart.source}))`\n);\n\n/**\n * Matches the subset of ISO8601 dates that Fauna can accept. Cannot include any\n * time part\n */\nexport const plaindate = new RegExp(`^${datesplit.source}$`);\n\n/**\n * Matches a valid ISO8601 date and can have anything trailing after.\n */\nexport const startsWithPlaindate = new RegExp(`^${datesplit.source}`);\n\n/**\n * Matches the subset of ISO8601 times that Fauna can accept.\n */\nexport const datetime = new RegExp(\n  `^${datesplit.source}T${timesplit.source}${zonesplit.source}$`\n);\n", "import { ClientError } from \"../errors\";\nimport * as PARSE from \"../regex\";\n\n/**\n * A wrapper around the Fauna `Time` type. It, represents a fixed point in time\n * without regard to calendar or location, e.g. July 20, 1969, at 20:17 UTC.\n * Convert to and from Javascript Date's with the {@link TimeStub.fromDate} and\n * {@link TimeStub.toDate} methods.\n * See remarks for possible precision loss when doing this. If precision loss is\n * a concern consider using a 3rd party datetime library such as luxon.\n *\n * @remarks The Javascript `Date` type most closely resembles a Fauna `Time`,\n * not a Fauna `Date`. However, Fauna stores `Time` values with nanosecond\n * precision, while Javascript `Date` values only have millisecond precision.\n * This TimeStub class preserves precision by storing the original string value\n * and should be used whenever possible to pass `Time` values back to Fauna.\n * Converting to a Javascript date before sending to Fauna could result in loss\n * of precision.\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#time}\n */\nexport class TimeStub {\n  readonly isoString: string;\n\n  /**\n   * @remarks constructor is private to enforce using factory functions\n   */\n  private constructor(isoString: string) {\n    this.isoString = isoString;\n  }\n\n  /**\n   * Creates a new {@link TimeStub} from an ISO date string\n   * @param isoString - An ISO date string.\n   * @returns A new {@link TimeStub}\n   * @throws TypeError if a string is not provided, or RangeError if item\n   * is not a valid date\n   */\n  static from(isoString: string): TimeStub {\n    if (typeof isoString !== \"string\") {\n      throw new TypeError(\n        `Expected string but received ${typeof isoString}: ${isoString}`\n      );\n    }\n    const matches = PARSE.datetime.exec(isoString);\n    if (matches === null) {\n      throw new RangeError(\n        `(regex) Expected an ISO date string but received '${isoString}'`\n      );\n    }\n    // There are some dates that match the regex but are invalid, such as Feb 31.\n    // Javascript does not parse all years that are valid in fauna, so let\n    // Fauna be the final check.\n\n    return new TimeStub(isoString);\n  }\n\n  /**\n   * Creates a new {@link TimeStub} from a Javascript `Date`\n   * @param date - A Javascript `Date`\n   * @returns A new {@link TimeStub}\n   */\n  static fromDate(date: Date): TimeStub {\n    return new TimeStub(date.toISOString());\n  }\n\n  /**\n   * Get a copy of the `TimeStub` converted to a Javascript `Date`. Does not\n   * mutate the existing `TimeStub` value.\n   * @returns A `Date`\n   */\n  toDate(): Date {\n    const date = new Date(this.isoString);\n    if (date.toString() === \"Invalid Date\") {\n      throw new RangeError(\n        \"Fauna Date could not be converted to Javascript Date\"\n      );\n    }\n    return date;\n  }\n\n  /**\n   * Override default string conversion\n   * @returns the string representation of a `TimeStub`\n   */\n  toString(): string {\n    return `TimeStub(\"${this.isoString}\")`;\n  }\n}\n\n/**\n * A wrapper aroud the Fauna `Date` type. It represents a calendar date that is\n * not associated with a particular time or time zone, e.g. August 24th, 2006.\n * Convert to and from Javascript Date's with the {@link DateStub.fromDate} and\n * {@link DateStub.toDate} methods. Javascript Dates are rendered in UTC time\n * before the date part is used.\n * See remarks for possible precision loss when doing this. If precision loss is\n * a concern consider using a 3rd party datetime library such as luxon.\n *\n * @remarks The Javascript `Date` type always has a time associated with it, but\n * Fauna's `Date` type does not. When converting from a Fauna `Date` to a\n * Javascript `Date`, we set time to 00:00:00 UTC. When converting a Javascript\n * `Date` or time string to Fauna `Date`, we convert to UTC first. Care should\n * be taken to specify the desired date, since Javascript `Date`s use local\n * timezone info by default.\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#date}\n */\nexport class DateStub {\n  readonly dateString: string;\n\n  /**\n   * @remarks constructor is private to enforce using factory functions\n   */\n  private constructor(dateString: string) {\n    this.dateString = dateString;\n  }\n\n  /**\n   * Creates a new {@link DateStub} from a date string\n   * @param dateString - A plain date string. The time is converted to UTC\n   * before saving the date.\n   * @returns A new {@link DateStub}\n   * @throws TypeError if a string is not provided, or RangeError if dateString\n   * is not a valid date\n   */\n  static from(dateString: string): DateStub {\n    if (typeof dateString !== \"string\") {\n      throw new TypeError(\n        `Expected string but received ${typeof dateString}: ${dateString}`\n      );\n    }\n    const matches = PARSE.plaindate.exec(dateString);\n    if (matches === null) {\n      throw new RangeError(\n        `Expected a plain date string but received '${dateString}'`\n      );\n    }\n    // There are some dates that match the regex but are invalid, such as Feb 31.\n    // Javascript does not parse all years that are valid in fauna, so let\n    // Fauna be the final check.\n\n    return new DateStub(matches[0]);\n  }\n\n  /**\n   * Creates a new {@link DateStub} from a Javascript `Date`\n   * @param date - A Javascript `Date`. The time is converted to UTC before\n   * saving the date.\n   * @returns A new {@link DateStub}\n   */\n  static fromDate(date: Date): DateStub {\n    const dateString = date.toISOString();\n    const matches = PARSE.startsWithPlaindate.exec(dateString);\n    if (matches === null) {\n      // Our regex should match any possible date that comes out of\n      // `Date.toISOString()`, so we will only get here if the regex is\n      // incorrect. This is a ClientError since it is our fault.\n      throw new ClientError(`Failed to parse date '${date}'`);\n    }\n    return new DateStub(matches[0]);\n  }\n\n  /**\n   * Get a copy of the `TimeStub` converted to a Javascript `Date`. Does not\n   * mutate the existing `TimeStub` value.\n   * @returns A `Date`\n   */\n  toDate(): Date {\n    const date = new Date(this.dateString + \"T00:00:00Z\");\n    if (date.toString() === \"Invalid Date\") {\n      throw new RangeError(\n        \"Fauna Date could not be converted to Javascript Date\"\n      );\n    }\n    return date;\n  }\n\n  /**\n   * Override default string conversion\n   * @returns the string representation of a `DateStub`\n   */\n  toString(): string {\n    return `DateStub(\"${this.dateString}\")`;\n  }\n}\n", "import { QueryValueObject } from \"../wire-protocol\";\nimport { TimeStub } from \"./date-time\";\n\n/**\n * A reference to a Document with an ID. The Document may or may not exist.\n * References to Keys, Tokens, and Documents in user-defined Collections are\n * modeled with a {@link DocumentReference}.\n *\n * The example below retrieves a document reference from a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const userDocumentReference = response.data;\n *\n *  const id = userDocumentReference.id;\n *  id === \"101\"; // returns true\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class DocumentReference {\n  readonly coll: Module;\n  readonly id: string;\n\n  constructor({ coll, id }: { coll: Module | string; id: string }) {\n    this.id = id;\n\n    if (typeof coll === \"string\") {\n      this.coll = new Module(coll);\n    } else {\n      this.coll = coll;\n    }\n  }\n}\n\n/**\n * A materialized Document with an ID. Keys, Tokens and Documents in\n * user-defined Collections are modeled with a {@link Document}. All top level\n * Document fields are added to a {@link Document} instance, but types cannot be\n * provided. Cast the instance to a {@link DocumentT} to have typesafe access to\n * all top level fields.\n *\n * The example below retrieves a document from a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const userDocument = response.data;\n *\n *  const color = userDocument.color;\n * ```\n *\n * @remarks The {@link Document} class cannot be generic because classes cannot\n * extend generic type arguments.\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class Document extends DocumentReference {\n  readonly ts: TimeStub;\n  readonly ttl?: TimeStub;\n\n  constructor(obj: {\n    coll: Module | string;\n    id: string;\n    ts: TimeStub;\n    [key: string]: any;\n  }) {\n    const { coll, id, ts, ...rest } = obj;\n    super({ coll, id });\n    this.ts = ts;\n    Object.assign(this, rest);\n  }\n\n  toObject(): { coll: Module; id: string; ts: TimeStub; ttl?: TimeStub } {\n    return { ...this };\n  }\n}\n\n/**\n * A reference to a Document with a name. The Document may or may not exist.\n * References to specific AccessProviders, Collections, Databases, Functions, etc. are\n * modeled with a {@link NamedDocumentReference}.\n *\n * The example below retrieves a NamedDocumentReference for a hypothetical\n * \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.definition\n *  `);\n *  const namedDocumentReference = response.data;\n *\n *  const collectionName = namedDocumentReference.name;\n *  collectionName === \"Users\"; // returns true\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class NamedDocumentReference {\n  readonly coll: Module;\n  readonly name: string;\n\n  constructor({ coll, name }: { coll: Module | string; name: string }) {\n    this.name = name;\n\n    if (typeof coll === \"string\") {\n      this.coll = new Module(coll);\n    } else {\n      this.coll = coll;\n    }\n  }\n}\n\n/**\n * A materialized Document with a name. Specific AccessProviders, Collections, Databases,\n * Functions, etc. that include user defined data are modeled with a {@link NamedDocument}.\n *\n * The example below retrieves a NamedDocument for a hypothetical\n * \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.definition\n *  `);\n *  const userCollectionNamedDocument = response.data;\n *\n *  const indexes = userCollectionNamedDocument.indexes;\n * ```\n *\n * @example\n * All of the named Documents can have optional, user-defined data. The generic\n * class lets you define the shape of that data in a typesafe way\n * ```typescript\n *  type CollectionMetadata = {\n *    metadata: string\n *  }\n *\n *  const response = await client.query<NamedDocument<CollectionMetadata>>(fql`\n *    Users.definition\n *  `);\n *  const userCollection = response.data;\n *\n *  const metadata = userCollection.data.metadata;\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class NamedDocument<\n  T extends QueryValueObject = Record<string, never>,\n> extends NamedDocumentReference {\n  readonly ts: TimeStub;\n  readonly data: T;\n\n  constructor(obj: {\n    coll: Module | string;\n    name: string;\n    ts: TimeStub;\n    data?: T;\n  }) {\n    const { coll, name, ts, data, ...rest } = obj;\n    super({ coll, name });\n    this.ts = ts;\n    this.data = data || ({} as T);\n    Object.assign(this, rest);\n  }\n\n  toObject(): { coll: Module; name: string; ts: TimeStub; data: T } {\n    return { ...this } as { coll: Module; name: string; ts: TimeStub; data: T };\n  }\n}\n\n/**\n * A Fauna module, such as a Collection, Database, Function, Role, etc.\n * Every module is usable directly in your FQL code.\n *\n * The example below shows FQL code that gets all documents for a hypothetical\n * 'Users' collection by creating a Module for user and then calling .all().\n *\n * You can also create modules for databases, functions, roles and other\n * entities in your database.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    ${new Module(\"Users\")}.all()\n *  `);\n *  const allUserDocuments = response.data;\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#module}\n */\nexport class Module {\n  readonly name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\n/**\n * A reference to a Document or Named Document that could not be read. The\n * Document may or may not exist in future queries. The cause field specifies\n * the reason the document could not be read, typically because the Document\n * does not exist or due to insufficient privileges.\n *\n * Some read operations, such as the `<Collection>.byId` method may return\n * either a Document or a NullDocument. This example shows how to handle such a\n * result with the driver\n *\n * @example\n * ```typescript\n *  const response = await client.query<Document | NullDocument>(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const maybeUserDocument = response.data;\n *\n *  if (maybeUserDocument instanceof NullDocument) {\n *    // handle NullDocument case\n *    const cause = maybeUserDocument.cause\n *  } else {\n *    // handle Document case\n *    const color = maybeUserDocument.color;\n *  }\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#nulldoc}\n */\nexport class NullDocument {\n  readonly ref: DocumentReference | NamedDocumentReference;\n  readonly cause: string;\n\n  constructor(ref: DocumentReference | NamedDocumentReference, cause: string) {\n    this.ref = ref;\n    this.cause = cause;\n  }\n}\n\n/**\n * A Document typed with a user-defined data type. Typescript users can cast\n * instances of {@link Document} to {@link DocumentT} to access user-defined fields with type safety.\n *\n * The example below creates a local type \"User\" that is applied to queries for documents in a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```typescript\n *  type User = {\n *    color: string\n *  }\n *\n *  const response = await client.query<DocumentT<User>>(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const user = response.data;\n *\n *  const color = user.color;\n * ```\n *\n * @remarks The {@link Document} class cannot be generic because classes cannot\n * extend generic type arguments.\n */\nexport type DocumentT<T extends QueryValueObject> = Document & T;\n", "import { Client } from \"../client\";\nimport { Query, fql } from \"../query-builder\";\nimport { QueryOptions, QueryValue } from \"../wire-protocol\";\n\n/**\n * A materialized view of a Set.\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#set}\n */\nexport class Page<T extends QueryValue> {\n  /** A materialized page of data */\n  readonly data: T[];\n  /**\n   * A pagination cursor, used to obtain additional information in the Set.\n   * If `after` is not provided, then `data` must be present and represents the\n   * last Page in the Set.\n   */\n  readonly after?: string;\n\n  constructor({ data, after }: { data: T[]; after?: string }) {\n    this.data = data;\n    this.after = after;\n  }\n}\n\n/**\n * A un-materialized Set. Typically received when a materialized Set contains\n * another set, the EmbeddedSet does not contain any data to avoid potential\n * issues such as self-reference and infinite recursion\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#set}\n */\nexport class EmbeddedSet {\n  /**\n   * A pagination cursor, used to obtain additional information in the Set.\n   */\n  readonly after: string;\n\n  constructor(after: string) {\n    this.after = after;\n  }\n}\n\n/**\n * A class to provide an iterable API for fetching multiple pages of data, given\n * a Fauna Set\n */\nexport class SetIterator<T extends QueryValue>\n  implements AsyncGenerator<T[], void, unknown>\n{\n  readonly #generator: AsyncGenerator<T[], void, unknown>;\n\n  /**\n   * Constructs a new {@link SetIterator}.\n   *\n   * @remarks Though you can use {@link SetIterator} class directly, it is\n   * most common to create an instance through the {@link Client.paginate} `paginate`\n   * method.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration\n   * @param client - The {@link Client} that will be used to fetch new data on\n   * each iteration\n   * @param initial - An existing fauna Set ({@link Page} or\n   * {@link EmbeddedSet}) or function which returns a promise. If the Promise\n   * resolves to a {@link Page} or {@link EmbeddedSet} then the iterator will\n   * use the client to fetch additional pages of data.\n   * @param options - a {@link QueryOptions} to apply to the queries. Optional.\n   */\n  constructor(\n    client: Client,\n    initial: Page<T> | EmbeddedSet | (() => Promise<T | Page<T> | EmbeddedSet>),\n    options?: QueryOptions,\n  ) {\n    options = options ?? {};\n    if (initial instanceof Function) {\n      this.#generator = generateFromThunk(client, initial, options);\n    } else if (initial instanceof Page || initial instanceof EmbeddedSet) {\n      this.#generator = generatePages(client, initial, options);\n    } else {\n      throw new TypeError(\n        `Expected 'Page<T> | EmbeddedSet | (() => Promise<T | Page<T> | EmbeddedSet>)', but received ${JSON.stringify(\n          initial,\n        )}`,\n      );\n    }\n  }\n\n  /**\n   * Constructs a new {@link SetIterator} from an {@link Query}\n   *\n   * @internal Though you can use {@link SetIterator.fromQuery} directly, it is\n   * intended as a convenience for use in the {@link Client.paginate} method\n   */\n  static fromQuery<T extends QueryValue>(\n    client: Client,\n    query: Query,\n    options?: QueryOptions,\n  ): SetIterator<T> {\n    return new SetIterator<T>(\n      client,\n      async () => {\n        const response = await client.query<T | Page<T> | EmbeddedSet>(\n          query,\n          options,\n        );\n        return response.data;\n      },\n      options,\n    );\n  }\n\n  /**\n   * Constructs a new {@link SetIterator} from an {@link Page} or\n   * {@link EmbeddedSet}\n   *\n   * @internal Though you can use {@link SetIterator.fromPageable} directly, it\n   * is intended as a convenience for use in the {@link Client.paginate} method\n   */\n  static fromPageable<T extends QueryValue>(\n    client: Client,\n    pageable: Page<T> | EmbeddedSet,\n    options?: QueryOptions,\n  ): SetIterator<T> {\n    return new SetIterator<T>(client, pageable, options);\n  }\n\n  /**\n   * Constructs a new {@link FlattenedSetIterator} from the current instance\n   *\n   * @returns A new {@link FlattenedSetIterator} from the current instance\n   */\n  flatten(): FlattenedSetIterator<T> {\n    return new FlattenedSetIterator(this);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next| AsyncGenerator.next}\n   * */\n  async next(): Promise<IteratorResult<T[], void>> {\n    return this.#generator.next();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return| AsyncGenerator.return}\n   * */\n  async return(): Promise<IteratorResult<T[], void>> {\n    return this.#generator.return();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw| AsyncGenerator.throw}\n   * */\n  async throw(e: any): Promise<IteratorResult<T[], void>> {\n    return this.#generator.throw(e);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator| AsyncGenerator}\n   * */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n}\n\n/**\n * A class to provide an iterable API for fetching multiple pages of data, given\n * a Fauna Set. This class takes a {@link SetIterator} and flattens the results\n * to yield the items directly.\n */\nexport class FlattenedSetIterator<T extends QueryValue>\n  implements AsyncGenerator<T, void, unknown>\n{\n  readonly #generator: AsyncGenerator<T, void, unknown>;\n\n  /**\n   * Constructs a new {@link FlattenedSetIterator}.\n   *\n   * @remarks Though you can use {@link FlattenedSetIterator} class directly, it\n   * is most common to create an instance through the\n   * {@link SetIterator.flatten} method.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration\n   * @param setIterator - The {@link SetIterator}\n   */\n  constructor(setIterator: SetIterator<T>) {\n    this.#generator = generateItems(setIterator);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next| AsyncGenerator.next}\n   * */\n  async next(): Promise<IteratorResult<T, void>> {\n    return this.#generator.next();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return| AsyncGenerator.return}\n   * */\n  async return(): Promise<IteratorResult<T, void>> {\n    return this.#generator.return();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw| AsyncGenerator.throw}\n   * */\n  async throw(e: any): Promise<IteratorResult<T, void>> {\n    return this.#generator.throw(e);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator| AsyncGenerator}\n   * */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n}\n\n/**\n * Internal async generator function to use with {@link Page} and\n * {@link EmbeddedSet} values\n */\nasync function* generatePages<T extends QueryValue>(\n  client: Client,\n  initial: Page<T> | EmbeddedSet,\n  options: QueryOptions,\n): AsyncGenerator<T[], void, unknown> {\n  let currentPage = initial;\n\n  if (currentPage instanceof Page) {\n    yield currentPage.data;\n  }\n\n  while (currentPage.after) {\n    // cursor means there is more data to fetch\n    const query = fql`Set.paginate(${currentPage.after})`;\n    const response = await client.query<Page<T>>(query, options);\n    const nextPage = response.data;\n\n    currentPage = nextPage;\n    yield currentPage.data;\n  }\n}\n\n/**\n * Internal async generator function to use with a function that returns a\n * promise of data. If the promise resolves to a {@link Page} or\n * {@link EmbeddedSet} then continue iterating.\n */\nasync function* generateFromThunk<T extends QueryValue>(\n  client: Client,\n  thunk: () => Promise<T | Page<T> | EmbeddedSet>,\n  options: QueryOptions,\n): AsyncGenerator<T[], void, unknown> {\n  const result = await thunk();\n\n  if (result instanceof Page || result instanceof EmbeddedSet) {\n    for await (const page of generatePages(\n      client,\n      result as Page<T> | EmbeddedSet,\n      options,\n    )) {\n      yield page;\n    }\n    return;\n  }\n\n  yield [result];\n}\n\n/**\n * Internal async generator function that flattens a {@link SetIterator}\n */\nasync function* generateItems<T extends QueryValue>(\n  setIterator: SetIterator<T>,\n) {\n  for await (const page of setIterator) {\n    for (const item of page) {\n      yield item;\n    }\n  }\n}\n", "import {\n  FeedSuccess,\n  QueryValue,\n  StreamEventData,\n  QueryStats,\n} from \"../wire-protocol\";\nimport { getServiceError } from \"../errors\";\n\n/**\n * A token used to initiate a Fauna event source at a particular snapshot in time.\n *\n * The example below shows how to request an event token from Fauna and use it\n * to establish an event steam.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Messages.byRecipient(User.byId(\"1234\"))\n *  `);\n *  const eventSource = response.data;\n *\n *  const stream = client.stream(eventSource)\n *    .on(\"add\", (event) => console.log(\"New message\", event))\n *\n *  stream.start();\n * ```\n */\nexport interface EventSource {\n  readonly token: string;\n}\n\nexport function isEventSource(value: any): value is EventSource {\n  if (typeof value.token === \"string\") {\n    return true;\n  }\n\n  return false;\n}\n\nexport class StreamToken implements EventSource {\n  readonly token: string;\n\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n/**\n * A class to represent a page of events from a Fauna stream.\n */\nexport class FeedPage<T extends QueryValue> {\n  readonly events: IterableIterator<StreamEventData<T>>;\n  readonly cursor: string;\n  readonly hasNext: boolean;\n  readonly stats?: QueryStats;\n\n  constructor({ events, cursor, has_next, stats }: FeedSuccess<T>) {\n    this.events = this.#toEventIterator(events);\n    this.cursor = cursor;\n    this.hasNext = has_next;\n    this.stats = stats;\n  }\n\n  *#toEventIterator(\n    events: FeedSuccess<T>[\"events\"],\n  ): IterableIterator<StreamEventData<T>> {\n    // A page of events may contain an error event. These won't be reported\n    // at a response level, so we need to check for them here. They are\n    // considered fatal. Pages end at the first error event.\n    for (const event of events) {\n      if (event.type === \"error\") {\n        throw getServiceError(event);\n      }\n\n      yield event;\n    }\n  }\n}\n", "import { TaggedTypeFormat } from \"./tagged-type\";\nimport type {\n  FQLFragment,\n  QueryValue,\n  QueryInterpolation,\n} from \"./wire-protocol\";\n\n/**\n * A QueryArgumentObject is a plain javascript object where each property is a\n * valid QueryArgument.\n */\nexport type QueryArgumentObject = {\n  [key: string]: QueryArgument;\n};\n\n/**\n * A QueryArgument represents all possible values that can be encoded and passed\n * to Fauna as a query argument.\n *\n * The {@link fql} tagged template function requires all arguments to be of type\n * QueryArgument.\n */\nexport type QueryArgument =\n  | QueryValue\n  | Query<any>\n  | Date\n  | ArrayBuffer\n  | Uint8Array\n  | Array<QueryArgument>\n  | QueryArgumentObject;\n\n/**\n * Creates a new Query. Accepts template literal inputs.\n * @typeParam T - The expected type of the response from Fauna when evaluated.\n * @param queryFragments - An array that constitutes\n *   the strings that are the basis of the query.\n * @param queryArgs - an Array\\<QueryValue | Query\\> that\n *   constitute the arguments to inject between the queryFragments.\n * @throws Error - if you call this method directly (not using template\n *   literals) and pass invalid construction parameters\n * @example\n * ```typescript\n *  const str = \"baz\";\n *  const num = 17;\n *  const innerQuery = fql`${num} + 3)`;\n *  const queryRequestBuilder = fql`${str}.length == ${innerQuery}`;\n * ```\n */\nexport function fql<T extends QueryValue = any>(\n  queryFragments: ReadonlyArray<string>,\n  ...queryArgs: QueryArgument[]\n): Query<T> {\n  return new Query<T>(queryFragments, ...queryArgs);\n}\n\n/**\n * Internal class.\n * A builder for composing queries using the {@link fql} tagged template\n * function\n * @typeParam T - The expected type of the response from Fauna when evaluated.\n *   T can be used to infer the type of the response type from {@link Client}\n *   methods.\n */\nexport class Query<T extends QueryValue = any> {\n  readonly #queryFragments: ReadonlyArray<string>;\n  readonly #interpolatedArgs: QueryArgument[];\n  /**\n   * A phantom field to enforce the type of the Query.\n   * @internal\n   *\n   * We need to provide an actual property of type `T` for Typescript to\n   * actually enforce it.\n   *\n   * \"Because TypeScript is a structural type system, type parameters only\n   * affect the resulting type when consumed as part of the type of a member.\"\n   *\n   * @see {@link https://www.typescriptlang.org/docs/handbook/type-compatibility.html#generics}\n   */\n  readonly #__phantom: T;\n\n  constructor(\n    queryFragments: ReadonlyArray<string>,\n    ...queryArgs: QueryArgument[]\n  ) {\n    if (\n      queryFragments.length === 0 ||\n      queryFragments.length !== queryArgs.length + 1\n    ) {\n      throw new Error(\"invalid query constructed\");\n    }\n    this.#queryFragments = queryFragments;\n    this.#interpolatedArgs = queryArgs;\n\n    // HACK: We have to construct the phantom field, but we don't have any value for it.\n    this.#__phantom = undefined as unknown as T;\n  }\n\n  /**\n   * Converts this Query to an {@link FQLFragment} you can send\n   * to Fauna.\n   * @returns a {@link FQLFragment}.\n   * @example\n   * ```typescript\n   *  const num = 8;\n   *  const queryBuilder = fql`'foo'.length == ${num}`;\n   *  const queryRequest = queryBuilder.toQuery();\n   *  // produces:\n   *  { fql: [\"'foo'.length == \", { value: { \"@int\": \"8\" } }, \"\"] }\n   * ```\n   */\n  encode(): FQLFragment {\n    if (this.#queryFragments.length === 1) {\n      return { fql: [this.#queryFragments[0]] };\n    }\n\n    let renderedFragments: (string | QueryInterpolation)[] =\n      this.#queryFragments.flatMap((fragment, i) => {\n        // There will always be one more fragment than there are arguments\n        if (i === this.#queryFragments.length - 1) {\n          return fragment === \"\" ? [] : [fragment];\n        }\n\n        // arguments in the template format must always be encoded, regardless\n        // of the \"x-format\" request header\n        // TODO: catch and rethrow Errors, indicating bad user input\n        const arg = this.#interpolatedArgs[i];\n        const encoded = TaggedTypeFormat.encodeInterpolation(arg);\n\n        return [fragment, encoded];\n      });\n\n    // We don't need to send empty-string fragments over the wire\n    renderedFragments = renderedFragments.filter((x) => x !== \"\");\n\n    return { fql: renderedFragments };\n  }\n}\n", "//THIS FILE IS AUTOGENERATED. DO NOT EDIT. SEE .husky/pre-commit\n\n/** The current package version. */\nexport const packageVersion = \"2.4.0\";\n", "import { packageVersion } from \"./package-version\";\n\nlet os: any;\ntry {\n  os = require(\"node:os\");\n} catch (_) {\n  os = undefined;\n}\n\n/**\n * Function to put all of the environment details together.\n * @internal\n */\nexport const getDriverEnv = (): string => {\n  const driverEnv = {\n    driver: [\"javascript\", packageVersion].join(\"-\"),\n    env: \"unknown\",\n    os: \"unknown\",\n    runtime: \"unknown\",\n  };\n\n  try {\n    /**\n     * Determine if we're executing in a Node environment\n     */\n    const isNode =\n      typeof window === \"undefined\" &&\n      typeof process !== \"undefined\" &&\n      process.versions != null &&\n      process.versions.node != null;\n\n    /**\n     * Determine if we're executing in a Node environment\n     */\n    const isBrowser =\n      typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n    /**\n     * Determine if we're executing in a Service Worker environment\n     */\n    const isServiceWorker =\n      typeof self === \"object\" &&\n      self.constructor &&\n      self.constructor.name === \"DedicatedWorkerGlobalScope\";\n\n    /**\n     * Determine if we're executing in Vercel's Edge Runtime\n     * @see {@link https://vercel.com/docs/concepts/functions/edge-functions/edge-runtime#check-if-you're-running-on-the-edge-runtime}\n     */\n    // @ts-expect-error Cannot find name 'EdgeRuntime'\n    const isVercelEdgeRuntime = typeof EdgeRuntime !== \"string\";\n\n    if (isNode) {\n      driverEnv.runtime = [\"nodejs\", process.version].join(\"-\");\n      driverEnv.env = getNodeRuntimeEnv();\n      driverEnv.os = [os.platform(), os.release()].join(\"-\");\n    } else if (isServiceWorker) {\n      driverEnv.runtime = getBrowserDetails(navigator);\n      driverEnv.env = \"Service Worker\";\n      driverEnv.os = getBrowserOsDetails(navigator);\n    } else if (isBrowser) {\n      driverEnv.runtime = getBrowserDetails(navigator);\n      driverEnv.env = \"browser\";\n      driverEnv.os = getBrowserOsDetails(navigator);\n    } else if (isVercelEdgeRuntime) {\n      driverEnv.runtime = \"Vercel Edge Runtime\";\n      driverEnv.env = \"edge\";\n    }\n  } catch (e) {\n    // ignore errors trying to report on user environment\n  }\n\n  return (\n    Object.entries(driverEnv)\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      .filter(([_, val]) => val !== \"unknown\")\n      .map((entry: [string, string]) => entry.join(\"=\"))\n      .join(\"; \")\n  );\n};\n\n/**\n * Get browser environment details\n */\nconst getBrowserDetails = (navigator: Navigator | WorkerNavigator): string => {\n  let browser: string = navigator.appName;\n  let browserVersion = \"\" + parseFloat(navigator.appVersion);\n  let nameOffset, verOffset, ix;\n\n  // Opera\n  if ((verOffset = navigator.userAgent.indexOf(\"Opera\")) != -1) {\n    browser = \"Opera\";\n    browserVersion = navigator.userAgent.substring(verOffset + 6);\n    if ((verOffset = navigator.userAgent.indexOf(\"Version\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8);\n    }\n  }\n  // MSIE\n  else if ((verOffset = navigator.userAgent.indexOf(\"MSIE\")) != -1) {\n    browser = \"Microsoft Internet Explorer\";\n    browserVersion = navigator.userAgent.substring(verOffset + 5);\n  }\n\n  //IE 11 no longer identifies itself as MS IE, so trap it\n  //http://stackoverflow.com/questions/17907445/how-to-detect-ie11\n  else if (\n    browser == \"Netscape\" &&\n    navigator.userAgent.indexOf(\"Trident/\") != -1\n  ) {\n    browser = \"Microsoft Internet Explorer\";\n    browserVersion = navigator.userAgent.substring(verOffset + 5);\n    if ((verOffset = navigator.userAgent.indexOf(\"rv:\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 3);\n    }\n  }\n\n  // Chrome\n  else if ((verOffset = navigator.userAgent.indexOf(\"Chrome\")) != -1) {\n    browser = \"Chrome\";\n    browserVersion = navigator.userAgent.substring(verOffset + 7);\n  }\n  // Safari\n  else if ((verOffset = navigator.userAgent.indexOf(\"Safari\")) != -1) {\n    browser = \"Safari\";\n    browserVersion = navigator.userAgent.substring(verOffset + 7);\n    if ((verOffset = navigator.userAgent.indexOf(\"Version\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8);\n    }\n\n    // Chrome on iPad identifies itself as Safari. Actual results do not match what Google claims\n    //  at: https://developers.google.com/chrome/mobile/docs/user-agent?hl=ja\n    //  No mention of chrome in the user agent string. However it does mention CriOS, which presumably\n    //  can be keyed on to detect it.\n    if (navigator.userAgent.indexOf(\"CriOS\") != -1) {\n      //Chrome on iPad spoofing Safari...correct it.\n      browser = \"Chrome\";\n      //Don't believe there is a way to grab the accurate version number, so leaving that for now.\n    }\n  }\n  // Firefox\n  else if ((verOffset = navigator.userAgent.indexOf(\"Firefox\")) != -1) {\n    browser = \"Firefox\";\n    browserVersion = navigator.userAgent.substring(verOffset + 8);\n  }\n  // Other browsers\n  else if (\n    (nameOffset = navigator.userAgent.lastIndexOf(\" \") + 1) <\n    (verOffset = navigator.userAgent.lastIndexOf(\"/\"))\n  ) {\n    browser = navigator.userAgent.substring(nameOffset, verOffset);\n    browserVersion = navigator.userAgent.substring(verOffset + 1);\n    if (browser.toLowerCase() == browser.toUpperCase()) {\n      browser = navigator.appName;\n    }\n  }\n  // trim the browser version string\n  if ((ix = browserVersion.indexOf(\";\")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n  if ((ix = browserVersion.indexOf(\" \")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n  if ((ix = browserVersion.indexOf(\")\")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n\n  return [browser, browserVersion].join(\"-\");\n};\n\n/**\n * Get OS details for the browser\n */\nconst getBrowserOsDetails = (\n  navigator: Navigator | WorkerNavigator\n): string => {\n  let os = \"unknown\";\n  const clientStrings = [\n    { s: \"Windows 10\", r: /(Windows 10.0|Windows NT 10.0)/ },\n    { s: \"Windows 8.1\", r: /(Windows 8.1|Windows NT 6.3)/ },\n    { s: \"Windows 8\", r: /(Windows 8|Windows NT 6.2)/ },\n    { s: \"Windows 7\", r: /(Windows 7|Windows NT 6.1)/ },\n    { s: \"Windows Vista\", r: /Windows NT 6.0/ },\n    { s: \"Windows Server 2003\", r: /Windows NT 5.2/ },\n    { s: \"Windows XP\", r: /(Windows NT 5.1|Windows XP)/ },\n    { s: \"Windows 2000\", r: /(Windows NT 5.0|Windows 2000)/ },\n    { s: \"Windows ME\", r: /(Win 9x 4.90|Windows ME)/ },\n    { s: \"Windows 98\", r: /(Windows 98|Win98)/ },\n    { s: \"Windows 95\", r: /(Windows 95|Win95|Windows_95)/ },\n    { s: \"Windows NT 4.0\", r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/ },\n    { s: \"Windows CE\", r: /Windows CE/ },\n    { s: \"Windows 3.11\", r: /Win16/ },\n    { s: \"Android\", r: /Android/ },\n    { s: \"Open BSD\", r: /OpenBSD/ },\n    { s: \"Sun OS\", r: /SunOS/ },\n    { s: \"Chrome OS\", r: /CrOS/ },\n    { s: \"Linux\", r: /(Linux|X11(?!.*CrOS))/ },\n    { s: \"iOS\", r: /(iPhone|iPad|iPod)/ },\n    { s: \"Mac OS X\", r: /Mac OS X/ },\n    { s: \"Mac OS\", r: /(Mac OS|MacPPC|MacIntel|Mac_PowerPC|Macintosh)/ },\n    { s: \"QNX\", r: /QNX/ },\n    { s: \"UNIX\", r: /UNIX/ },\n    { s: \"BeOS\", r: /BeOS/ },\n    { s: \"OS/2\", r: /OS\\/2/ },\n    {\n      s: \"Search Bot\",\n      r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/,\n    },\n  ];\n  for (const id in clientStrings) {\n    const cs = clientStrings[id];\n    if (cs.r.test(navigator.userAgent)) {\n      os = cs.s;\n      break;\n    }\n  }\n\n  let osVersion: string | undefined = \"unknown\";\n\n  if (/Windows/.test(os)) {\n    osVersion;\n    const matches = /Windows (.*)/.exec(os);\n    if (matches) {\n      osVersion = matches[1];\n    }\n    os = \"Windows\";\n  }\n\n  switch (os) {\n    case \"Mac OS\":\n    case \"Mac OS X\":\n    case \"Android\": {\n      const matches =\n        /(?:Android|Mac OS|Mac OS X|MacPPC|MacIntel|Mac_PowerPC|Macintosh) ([._\\d]+)/.exec(\n          navigator.userAgent\n        );\n      if (matches) {\n        osVersion = matches[1];\n      }\n      break;\n    }\n\n    case \"iOS\": {\n      const matches = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.appVersion);\n      if (matches) {\n        osVersion = matches[1] + \".\" + matches[2] + \".\" + (matches[3] ?? 0);\n      }\n      break;\n    }\n  }\n  return [os, osVersion].join(\"-\");\n};\n\nconst crossGlobal =\n  typeof window !== \"undefined\"\n    ? window\n    : typeof globalThis !== \"undefined\"\n    ? globalThis\n    : typeof global !== \"undefined\"\n    ? global\n    : self;\n\n/**\n * Get node environment details\n */\nconst getNodeRuntimeEnv = (): string => {\n  // return early if process variables are not available\n  if (\n    !(\n      typeof process !== \"undefined\" &&\n      process &&\n      process.env &&\n      typeof process.env === \"object\"\n    )\n  ) {\n    return \"unknown\";\n  }\n\n  const runtimeEnvs = [\n    {\n      name: \"Netlify\",\n      check: function (): boolean {\n        return !!process.env[\"NETLIFY_IMAGES_CDN_DOMAIN\"];\n      },\n    },\n    {\n      name: \"Vercel\",\n      check: function (): boolean {\n        return !!process.env[\"VERCEL\"];\n      },\n    },\n    {\n      name: \"Heroku\",\n      check: function (): boolean {\n        return (\n          !!process.env[\"PATH\"] && process.env.PATH.indexOf(\".heroku\") !== -1\n        );\n      },\n    },\n    {\n      name: \"AWS Lambda\",\n      check: function (): boolean {\n        return !!process.env[\"AWS_LAMBDA_FUNCTION_VERSION\"];\n      },\n    },\n    {\n      name: \"GCP Cloud Functions\",\n      check: function (): boolean {\n        return !!process.env[\"_\"] && process.env._.indexOf(\"google\") !== -1;\n      },\n    },\n    {\n      name: \"GCP Compute Instances\",\n      check: function (): boolean {\n        return !!process.env[\"GOOGLE_CLOUD_PROJECT\"];\n      },\n    },\n    {\n      name: \"Azure Cloud Functions\",\n      check: function (): boolean {\n        return !!process.env[\"WEBSITE_FUNCTIONS_AZUREMONITOR_CATEGORIES\"];\n      },\n    },\n    {\n      name: \"Azure Compute\",\n      check: function (): boolean {\n        return (\n          !!process.env[\"ORYX_ENV_TYPE\"] &&\n          !!process.env[\"WEBSITE_INSTANCE_ID\"] &&\n          process.env.ORYX_ENV_TYPE === \"AppService\"\n        );\n      },\n    },\n    {\n      name: \"Mongo Stitch\",\n      check: function (): boolean {\n        // @ts-expect-error Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.ts(7017)\n        return typeof crossGlobal?.StitchError === \"function\";\n      },\n    },\n    {\n      name: \"Render\",\n      check: function (): boolean {\n        return !!process.env[\"RENDER_SERVICE_ID\"];\n      },\n    },\n    {\n      name: \"Begin\",\n      check: function (): boolean {\n        return !!process.env[\"BEGIN_DATA_SCOPE_ID\"];\n      },\n    },\n  ];\n  const detectedEnv = runtimeEnvs.find((env) => env.check());\n\n  return detectedEnv ? detectedEnv.name : \"unknown\";\n};\n", "export type RetryOptions = {\n  maxAttempts: number;\n  maxBackoff: number;\n  shouldRetry?: (error: any) => boolean;\n  attempt?: number;\n  sleepFn?: (callback: (args: void) => void, ms?: number) => void;\n};\n\nexport const withRetries = async <T>(\n  fn: () => Promise<T>,\n  {\n    maxAttempts,\n    maxBackoff,\n    shouldRetry = () => true,\n    attempt = 0,\n    sleepFn = setTimeout,\n  }: RetryOptions,\n): Promise<T> => {\n  const backoffMs =\n    attempt > 0\n      ? Math.min(Math.random() * 2 ** attempt, maxBackoff) * 1_000\n      : 0;\n  attempt += 1;\n\n  try {\n    return await fn();\n  } catch (error: any) {\n    if (attempt >= maxAttempts || shouldRetry(error) !== true) {\n      throw error;\n    }\n\n    await new Promise((resolve) => sleepFn(resolve, backoffMs));\n    return withRetries(fn, {\n      maxAttempts,\n      maxBackoff,\n      shouldRetry,\n      attempt,\n      sleepFn,\n    });\n  }\n};\n", "import { QueryArgumentObject } from \"./query-builder\";\nimport {\n  DateStub,\n  Document,\n  DocumentReference,\n  EmbeddedSet,\n  Module,\n  NamedDocument,\n  NamedDocumentReference,\n  NullDocument,\n  Page,\n  StreamToken,\n  TimeStub,\n} from \"./values\";\n\n/**\n * A request to make to Fauna.\n */\nexport interface QueryRequest<\n  T extends string | QueryInterpolation = string | QueryInterpolation,\n> {\n  /** The query */\n  query: T;\n\n  /** Optional arguments. Variables in the query will be initialized to the\n   * value associated with an argument key.\n   */\n  arguments?: EncodedObject;\n}\n\n/**\n * Options for queries. Each query can be made with different options. Settings here\n * take precedence over those in {@link ClientConfiguration}.\n */\nexport interface QueryOptions {\n  /** Optional arguments. Variables in the query will be initialized to the\n   * value associated with an argument key.\n   */\n  arguments?: QueryArgumentObject;\n\n  /**\n   * Determines the encoded format expected for the query `arguments` field, and\n   * the `data` field of a successful response.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  format?: ValueFormat;\n\n  /**\n   * If true, unconditionally run the query as strictly serialized.\n   * This affects read-only transactions. Transactions which write\n   * will always be strictly serialized.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  linearized?: boolean;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#long | Fauna longs} to.\n   * Use 'number' to deserialize longs to number. Use 'bigint' to deserialize to bigint. Defaults to 'number'.\n   * Note, for extremely large maginitude numbers Javascript's number will lose precision; as Javascript's\n   * 'number' can only support +/- 2^53-1 whereas Fauna's long is 64 bit. If this is detected, a warning will\n   * be logged to the console and precision loss will occur.\n   * If your application uses extremely large magnitude numbers use 'bigint'.\n   */\n  long_type?: \"number\" | \"bigint\";\n\n  /**\n   * The max number of times to retry the query if contention is encountered.\n   *Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  max_contention_retries?: number;\n\n  /**\n   * Tags provided back via logging and telemetry.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  query_tags?: Record<string, string>;\n\n  /**\n   * The timeout to use in this query in milliseconds.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  query_timeout_ms?: number;\n\n  /**\n   * A traceparent provided back via logging and telemetry.\n   * Must match format: https://www.w3.org/TR/trace-context/#traceparent-header\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  traceparent?: string;\n\n  /**\n   * Enable or disable typechecking of the query before evaluation. If no value\n   * is provided, the value of `typechecked` in the database configuration will\n   * be used.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  typecheck?: boolean;\n\n  /**\n   * Enable or disable performance hints. Defaults to disabled.\n   * The QueryInfo object includes performance hints in the `summary` field, which is a\n   * top-level field in the response object.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  performance_hints?: boolean;\n\n  /**\n   * Secret to use instead of the client's secret.\n   */\n  secret?: string;\n}\n\n/**\n * tagged declares that type information is transmitted and received by the driver.\n * \"simple\" indicates it is not - pure JSON is used.\n * \"decorated\" will cause the service output to be shown in FQL syntax that could\n * hypothetically be used to query Fauna. This is intended to support CLI and\n * REPL like tools.\n * @example\n * ```typescript\n * // example of decorated output\n * { time: Time(\"2012-01-01T00:00:00Z\") }\n * ```\n */\nexport declare type ValueFormat = \"simple\" | \"tagged\" | \"decorated\";\n\nexport type QueryStats = {\n  /** The amount of Transactional Compute Ops consumed by the query. */\n  compute_ops: number;\n  /** The amount of Transactional Read Ops consumed by the query. */\n  read_ops: number;\n  /** The amount of Transactional Write Ops consumed by the query. */\n  write_ops: number;\n  /** The query run time in milliseconds. */\n  query_time_ms: number;\n  /** The amount of data read from storage, in bytes. */\n  storage_bytes_read: number;\n  /** The amount of data written to storage, in bytes. */\n  storage_bytes_write: number;\n  /** The number of times the transaction was retried due to write contention. */\n  contention_retries: number;\n  /** The number query attempts made due to retryable errors. */\n  attempts: number;\n  /**\n   * A list of rate limits hit.\n   * Included with QueryFailure responses when the query is rate limited.\n   */\n  rate_limits_hit?: (\"read\" | \"write\" | \"compute\")[];\n};\n\nexport type QueryInfo = {\n  /** The last transaction timestamp of the query. A Unix epoch in microseconds. */\n  txn_ts?: number;\n  /** The schema version that was used for the query execution. */\n  schema_version?: number;\n  /** A readable summary of any warnings or logs emitted by the query. */\n  summary?: string;\n  /** The value of the x-query-tags header, if it was provided. */\n  query_tags?: Record<string, string>;\n  /** Stats on query performance and cost */\n  stats?: QueryStats;\n};\n\n/**\n * A decoded response from a successful query to Fauna\n */\nexport type QuerySuccess<T extends QueryValue> = QueryInfo & {\n  /**\n   * The result of the query. The data is any valid JSON value.\n   * @remarks\n   * data is type parameterized so that you can treat it as a\n   * certain type if you are using typescript.\n   */\n  data: T;\n  /** The query's inferred static result type. */\n  static_type?: string;\n};\n\n/**\n * A decoded response from a failed query to Fauna. Integrations which only want to report a human\n * readable version of the failure can simply print out the \"summary\" field.\n */\nexport type QueryFailure = QueryInfo & {\n  /**\n   * The result of the query resulting in\n   */\n  error: {\n    /** A predefined code which indicates the type of error. See XXX for a list of error codes. */\n    code: string;\n    /** A short, human readable description of the error */\n    message: string;\n    /**\n     * A machine readable description of any constraint failures encountered by the query.\n     * Present only if this query encountered constraint failures.\n     */\n    constraint_failures?: Array<ConstraintFailure>;\n    /**\n     * The user provided value passed to the originating `abort()` call.\n     * Present only when the query encountered an `abort()` call, which is\n     * denoted by the error code `\"abort\"`\n     */\n    abort?: QueryValue;\n  };\n};\n\n/**\n * A constraint failure triggered by a query.\n */\nexport type ConstraintFailure = {\n  /** Description of the constraint failure */\n  message: string;\n  /** Name of the failed constraint */\n  name?: string;\n  /** Path into the write input data to which the failure applies */\n  paths?: Array<Array<number | string>>;\n};\n\nexport type QueryResponse<T extends QueryValue> =\n  | QuerySuccess<T>\n  | QueryFailure;\n\nexport const isQuerySuccess = (res: any): res is QuerySuccess<any> =>\n  res instanceof Object && \"data\" in res;\n\nexport const isQueryFailure = (res: any): res is QueryFailure =>\n  res instanceof Object &&\n  \"error\" in res &&\n  res.error instanceof Object &&\n  \"code\" in res.error &&\n  \"message\" in res.error;\n\nexport const isQueryResponse = (res: any): res is QueryResponse<any> =>\n  isQueryResponse(res) || isQueryFailure(res);\n\n/**\n * A piece of an interpolated query. Interpolated queries can be safely composed\n * together without concern of query string injection.\n * @see {@link ValueFragment} and {@link FQLFragment} for additional\n * information\n */\nexport type QueryInterpolation =\n  | FQLFragment\n  | ValueFragment\n  | ObjectFragment\n  | ArrayFragment;\n\n/**\n * A piece of an interpolated query that represents an actual value. Arguments\n * are passed to fauna using ValueFragments so that query string injection is\n * not possible.\n * @remarks A ValueFragment is created by this driver when a literal value or\n * object is provided as an argument to the {@link fql} tagged template\n * function.\n *\n * ValueFragments must always be encoded with tags, regardless of the \"x-format\"\n * request header sent.\n * @example\n * ```typescript\n *  const num = 17;\n *  const query = fql`${num} + 3)`;\n *  // produces\n *  { \"fql\": [{ \"value\": { \"@int\": \"17\" } }, \" + 3\"] }\n * ```\n */\nexport type ValueFragment = { value: TaggedType };\n\n/**\n * A piece of an interpolated query that represents an object. Arguments\n * are passed to fauna using ObjectFragments so that query arguments can be\n * nested within javascript objects.\n *\n * ObjectFragments must always be encoded with tags, regardless of the\n * \"x-format\" request header sent.\n * @example\n * ```typescript\n *  const arg = { startDate: DateStub.from(\"2023-09-01\") };\n *  const query = fql`${arg})`;\n *  // produces\n *  {\n *\t\t\"fql\": [\n *\t\t\t{\n *\t\t\t\t\"object\": {\n *          \"startDate\": {\n *\t\t\t\t\t\t\"value\": { \"@date\": \"2023-09-01\" } // Object field values have type QueryInterpolation\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t]\n *\t}\n * ```\n */\nexport type ObjectFragment = { object: EncodedObject };\n\n/**\n * A piece of an interpolated query that represents an array. Arguments\n * are passed to fauna using ArrayFragments so that query arguments can be\n * nested within javascript arrays.\n *\n * ArrayFragments must always be encoded with tags, regardless of the \"x-format\"\n * request header sent.\n * @example\n * ```typescript\n *  const arg = [1, 2];\n *  const query = fql`${arg})`;\n *  // produces\n *  {\n *\t\t\"fql\": [\n *\t\t\t{\n *\t\t\t\t\"array\": [\n *\t\t\t\t\t{ \"value\": { \"@int\": \"1\" } }, // Array items have type QueryInterpolation\n *\t\t\t\t\t{ \"value\": { \"@int\": \"2\" } }\n *\t\t\t\t]\n *\t\t\t}\n *\t\t]\n *\t}\n * ```\n */\nexport type ArrayFragment = { array: TaggedType[] };\n\n/**\n * A piece of an interpolated query. Interpolated Queries can be safely composed\n * together without concern of query string injection.\n * @remarks A FQLFragment is created when calling the {@link fql} tagged\n * template function and can be passed as an argument to other Querys.\n * @example\n * ```typescript\n *  const num = 17;\n *  const query1 = fql`${num} + 3)`;\n *  const query2 = fql`5 + ${query1})`;\n *  // produces\n *  { \"fql\": [\"5 + \", { \"fql\": [{ \"value\": { \"@int\": \"17\" } }, \" + 3\"] }] }\n * ```\n */\nexport type FQLFragment = { fql: (string | QueryInterpolation)[] };\n\n/**\n * A source span indicating a segment of FQL.\n */\nexport interface Span {\n  /**\n   * A string identifier of the FQL source. For example, if performing\n   * a raw query against the API this would be *query*.\n   */\n  src: string;\n  /**\n   * The span's starting index within the src, inclusive.\n   */\n  start: number;\n  /**\n   * The span's ending index within the src, inclusive.\n   */\n  end: number;\n  /**\n   * The name of the enclosing function, if applicable.\n   */\n  function: string;\n}\n\n/**\n * A QueryValueObject is a plain javascript object where each value is a valid\n * QueryValue.\n * These objects can be returned in {@link QuerySuccess}.\n */\nexport interface QueryValueObject {\n  [key: string]: QueryValue;\n}\n\n/**\n * A QueryValue represents the possible return values in a {@link QuerySuccess}.\n */\nexport type QueryValue =\n  // plain javascript values\n  | null\n  | string\n  | number\n  | bigint\n  | boolean\n  | QueryValueObject\n  | Array<QueryValue>\n  | Uint8Array\n  // client-provided classes\n  | DateStub\n  | TimeStub\n  | Module\n  | Document\n  | DocumentReference\n  | NamedDocument\n  | NamedDocumentReference\n  | NullDocument\n  | Page<QueryValue>\n  | EmbeddedSet\n  | StreamToken;\n\nexport type StreamRequest = {\n  token: string;\n  start_ts?: number;\n  cursor?: string;\n};\n\nexport type StreamEventType = \"status\" | \"add\" | \"remove\" | \"update\" | \"error\";\nexport type StreamEventStatus = {\n  type: \"status\";\n  txn_ts: number;\n  cursor: string;\n  stats: QueryStats;\n};\nexport type StreamEventData<T extends QueryValue> = {\n  type: \"add\" | \"remove\" | \"update\";\n  txn_ts: number;\n  cursor: string;\n  stats: QueryStats;\n  data: T;\n};\nexport type StreamEventError = { type: \"error\" } & QueryFailure;\nexport type StreamEvent<T extends QueryValue> =\n  | StreamEventStatus\n  | StreamEventData<T>\n  | StreamEventError;\n\nexport type FeedRequest = StreamRequest & {\n  page_size?: number;\n};\n\nexport type FeedSuccess<T extends QueryValue> = {\n  events: (StreamEventData<T> | StreamEventError)[];\n  cursor: string;\n  has_next: boolean;\n  stats?: QueryStats;\n};\n\nexport type FeedError = QueryFailure;\n\nexport type TaggedBytes = { \"@bytes\": string };\nexport type TaggedDate = { \"@date\": string };\nexport type TaggedDouble = { \"@double\": string };\nexport type TaggedInt = { \"@int\": string };\nexport type TaggedLong = { \"@long\": string };\nexport type TaggedMod = { \"@mod\": string };\nexport type TaggedObject = { \"@object\": QueryValueObject };\nexport type TaggedRef = {\n  \"@ref\": { id: string; coll: TaggedMod } | { name: string; coll: TaggedMod };\n};\n// WIP: core does not accept `@set` tagged values\n// type TaggedSet = { \"@set\": { data: QueryValue[]; after?: string } };\nexport type TaggedTime = { \"@time\": string };\n\nexport type EncodedObject = { [key: string]: TaggedType };\n\nexport type TaggedType =\n  | string\n  | boolean\n  | null\n  | EncodedObject\n  | TaggedBytes\n  | TaggedDate\n  | TaggedDouble\n  | TaggedInt\n  | TaggedLong\n  | TaggedMod\n  | TaggedObject\n  | TaggedRef\n  | TaggedTime\n  | TaggedType[];\n", "import {\n  ClientConfiguration,\n  FeedClientConfiguration,\n  StreamClientConfiguration,\n  endpoints,\n} from \"./client-configuration\";\nimport {\n  ClientClosedError,\n  ClientError,\n  FaunaError,\n  NetworkError,\n  ProtocolError,\n  ServiceError,\n  ThrottlingError,\n  getServiceError,\n} from \"./errors\";\nimport {\n  FaunaAPIPaths,\n  HTTPRequest,\n  HTTPStreamClient,\n  StreamAdapter,\n  getDefaultHTTPClient,\n  isHTTPResponse,\n  isStreamClient,\n  type HTTPClient,\n} from \"./http-client\";\nimport { Query } from \"./query-builder\";\nimport { TaggedTypeFormat } from \"./tagged-type\";\nimport { getDriverEnv } from \"./util/environment\";\nimport { withRetries } from \"./util/retryable\";\nimport {\n  EmbeddedSet,\n  EventSource,\n  FeedPage,\n  Page,\n  SetIterator,\n  isEventSource,\n} from \"./values\";\nimport {\n  EncodedObject,\n  FeedError,\n  FeedRequest,\n  FeedSuccess,\n  QueryOptions,\n  QueryRequest,\n  StreamEvent,\n  StreamEventData,\n  StreamEventStatus,\n  isQueryFailure,\n  isQuerySuccess,\n  type QuerySuccess,\n  type QueryValue,\n} from \"./wire-protocol\";\n\ntype RequiredClientConfig = ClientConfiguration &\n  Required<\n    Pick<\n      ClientConfiguration,\n      | \"client_timeout_buffer_ms\"\n      | \"endpoint\"\n      | \"fetch_keepalive\"\n      | \"http2_max_streams\"\n      | \"http2_session_idle_ms\"\n      | \"secret\"\n      // required default query options\n      | \"format\"\n      | \"long_type\"\n      | \"query_timeout_ms\"\n      | \"max_attempts\"\n      | \"max_backoff\"\n    >\n  >;\n\nconst DEFAULT_CLIENT_CONFIG: Omit<\n  ClientConfiguration & RequiredClientConfig,\n  \"secret\" | \"endpoint\"\n> = {\n  client_timeout_buffer_ms: 5000,\n  format: \"tagged\",\n  http2_session_idle_ms: 5000,\n  http2_max_streams: 100,\n  long_type: \"number\",\n  fetch_keepalive: false,\n  query_timeout_ms: 5000,\n  max_attempts: 3,\n  max_backoff: 20,\n};\n\n/**\n * Client for calling Fauna.\n */\nexport class Client {\n  /** A static copy of the driver env header to send with each request */\n  static readonly #driverEnvHeader = getDriverEnv();\n\n  /** The {@link ClientConfiguration} */\n  readonly #clientConfiguration: RequiredClientConfig;\n  /** The underlying {@link HTTPClient} client. */\n  readonly #httpClient: HTTPClient & Partial<HTTPStreamClient>;\n  /** The last transaction timestamp this client has seen */\n  #lastTxnTs?: number;\n  /** true if this client is closed false otherwise */\n  #isClosed = false;\n\n  /**\n   * Constructs a new {@link Client}.\n   * @param clientConfiguration - the {@link ClientConfiguration} to apply. Defaults to recommended ClientConfiguraiton.\n   * @param httpClient - The underlying {@link HTTPClient} that will execute the actual HTTP calls. Defaults to recommended HTTPClient.\n   * @example\n   * ```typescript\n   *  const myClient = new Client(\n   *   {\n   *     endpoint: endpoints.cloud,\n   *     secret: \"foo\",\n   *     query_timeout_ms: 60_000,\n   *   }\n   * );\n   * ```\n   */\n  constructor(\n    clientConfiguration?: ClientConfiguration,\n    httpClient?: HTTPClient,\n  ) {\n    this.#clientConfiguration = {\n      ...DEFAULT_CLIENT_CONFIG,\n      ...clientConfiguration,\n      secret: this.#getSecret(clientConfiguration),\n      endpoint: this.#getEndpoint(clientConfiguration),\n    };\n\n    this.#validateConfiguration();\n\n    if (!httpClient) {\n      this.#httpClient = getDefaultHTTPClient({\n        url: this.#clientConfiguration.endpoint.toString(),\n        http2_session_idle_ms: this.#clientConfiguration.http2_session_idle_ms,\n        http2_max_streams: this.#clientConfiguration.http2_max_streams,\n        fetch_keepalive: this.#clientConfiguration.fetch_keepalive,\n      });\n    } else {\n      this.#httpClient = httpClient;\n    }\n  }\n\n  /**\n   * @returns the last transaction time seen by this client, or undefined if this client has not seen a transaction time.\n   */\n  get lastTxnTs(): number | undefined {\n    return this.#lastTxnTs;\n  }\n  /**\n   * Sets the last transaction time of this client.\n   * @param ts - the last transaction timestamp to set, as microseconds since\n   *   the epoch. If `ts` is less than the existing `#lastTxnTs` value or is\n   *   undefined , then no change is made.\n   */\n  set lastTxnTs(ts: number | undefined) {\n    if (ts !== undefined) {\n      this.#lastTxnTs = this.#lastTxnTs ? Math.max(ts, this.#lastTxnTs) : ts;\n    }\n  }\n\n  /**\n   * Return the {@link ClientConfiguration} of this client.\n   */\n  get clientConfiguration(): ClientConfiguration {\n    const { ...copy } = this.#clientConfiguration;\n    return copy;\n  }\n\n  /**\n   * Closes the underlying HTTP client. Subsequent query or close calls\n   * will fail.\n   */\n  close() {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. You cannot close it again.\",\n      );\n    }\n    this.#httpClient.close();\n    this.#isClosed = true;\n  }\n\n  /**\n   * Creates an iterator to yield pages of data. If additional pages exist, the\n   * iterator will lazily fetch addition pages on each iteration. Pages will\n   * be retried in the event of a ThrottlingError up to the client's configured\n   * max_attempts, inclusive of the initial call.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration. T can be inferred if the provided query used a type parameter.\n   * @param iterable - a {@link Query} or an existing fauna Set ({@link Page} or\n   * {@link EmbeddedSet})\n   * @param options - a {@link QueryOptions} to apply to the queries. Optional.\n   * @returns A {@link SetIterator} that lazily fetches new pages of data on\n   * each iteration\n   *\n   * @example\n   * ```javascript\n   *  const userIterator = await client.paginate(fql`\n   *    Users.all()\n   *  `);\n   *\n   *  for await (const users of userIterator) {\n   *    for (const user of users) {\n   *      // do something with each user\n   *    }\n   *  }\n   * ```\n   *\n   * @example\n   * The {@link SetIterator.flatten} method can be used so the iterator yields\n   * items directly. Each item is fetched asynchronously and hides when\n   * additional pages are fetched.\n   *\n   * ```javascript\n   *  const userIterator = await client.paginate(fql`\n   *    Users.all()\n   *  `);\n   *\n   *  for await (const user of userIterator.flatten()) {\n   *    // do something with each user\n   *  }\n   * ```\n   */\n  paginate<T extends QueryValue>(\n    iterable: Page<T> | EmbeddedSet | Query<T | Page<T>>,\n    options?: QueryOptions,\n  ): SetIterator<T> {\n    if (iterable instanceof Query) {\n      return SetIterator.fromQuery(this, iterable, options);\n    }\n    return SetIterator.fromPageable(this, iterable, options) as SetIterator<T>;\n  }\n\n  /**\n   * Queries Fauna. Queries will be retried in the event of a ThrottlingError up to the client's configured\n   * max_attempts, inclusive of the initial call.\n   *\n   * @typeParam T - The expected type of the response from Fauna. T can be inferred if the\n   *   provided query used a type parameter.\n   * @param query - a {@link Query} to execute in Fauna.\n   *   Note, you can embed header fields in this object; if you do that there's no need to\n   *   pass the headers parameter.\n   * @param options - optional {@link QueryOptions} to apply on top of the request input.\n   *   Values in this headers parameter take precedence over the same values in the {@link ClientConfiguration}.\n   * @returns Promise&lt;{@link QuerySuccess}&gt;.\n   *\n   * @throws {@link ServiceError} Fauna emitted an error. The ServiceError will be\n   *   one of ServiceError's child classes if the error can be further categorized,\n   *   or a concrete ServiceError if it cannot.\n   *   You can use either the type, or the underlying httpStatus + code to determine\n   *   the root cause.\n   * @throws {@link ProtocolError} the client a HTTP error not sent by Fauna.\n   * @throws {@link NetworkError} the client encountered a network issue\n   * connecting to Fauna.\n   * @throws A {@link ClientError} the client fails to submit the request\n   * @throws {@link ClientClosedError} if a query is issued after the client is closed.\n   * due to an internal error.\n   */\n  async query<T extends QueryValue>(\n    query: Query<T>,\n    options?: QueryOptions,\n  ): Promise<QuerySuccess<T>> {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. No further requests can be issued.\",\n      );\n    }\n\n    const request: QueryRequest = {\n      query: query.encode(),\n    };\n\n    if (options?.arguments) {\n      request.arguments = TaggedTypeFormat.encode(\n        options.arguments,\n      ) as EncodedObject;\n    }\n\n    return this.#queryWithRetries(request, options);\n  }\n\n  /**\n   * Initialize a streaming request to Fauna\n   * @typeParam T - The expected type of the response from Fauna. T can be inferred\n   *   if the provided query used a type parameter.\n   * @param tokenOrQuery - A string-encoded token for an {@link EventSource}, or a {@link Query}\n   * @returns A {@link StreamClient} that which can be used to listen to a stream\n   *   of events\n   *\n   * @example\n   * ```javascript\n   *  const stream = client.stream(fql`MyCollection.all().eventSource()`)\n   *\n   *  try {\n   *    for await (const event of stream) {\n   *      switch (event.type) {\n   *        case \"update\":\n   *        case \"add\":\n   *        case \"remove\":\n   *          console.log(\"Stream update:\", event);\n   *          // ...\n   *          break;\n   *      }\n   *    }\n   *  } catch (error) {\n   *    // An error will be handled here if Fauna returns a terminal, \"error\" event, or\n   *    // if Fauna returns a non-200 response when trying to connect, or\n   *    // if the max number of retries on network errors is reached.\n   *\n   *    // ... handle fatal error\n   *  };\n   * ```\n   *\n   * @example\n   * ```javascript\n   *  const stream = client.stream(fql`MyCollection.all().eventSource()`)\n   *\n   *  stream.start(\n   *    function onEvent(event) {\n   *      switch (event.type) {\n   *        case \"update\":\n   *        case \"add\":\n   *        case \"remove\":\n   *          console.log(\"Stream update:\", event);\n   *          // ...\n   *          break;\n   *      }\n   *    },\n   *    function onError(error) {\n   *      // An error will be handled here if Fauna returns a terminal, \"error\" event, or\n   *      // if Fauna returns a non-200 response when trying to connect, or\n   *      // if the max number of retries on network errors is reached.\n   *\n   *      // ... handle fatal error\n   *    }\n   *  );\n   * ```\n   */\n  stream<T extends QueryValue>(\n    tokenOrQuery: EventSource | Query<EventSource>,\n    options?: Partial<StreamClientConfiguration>,\n  ): StreamClient<T> {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. No further requests can be issued.\",\n      );\n    }\n\n    const streamClient = this.#httpClient;\n\n    if (isStreamClient(streamClient)) {\n      const streamClientConfig: StreamClientConfiguration = {\n        ...this.#clientConfiguration,\n        httpStreamClient: streamClient,\n        ...options,\n      };\n\n      if (\n        streamClientConfig.cursor !== undefined &&\n        tokenOrQuery instanceof Query\n      ) {\n        throw new ClientError(\n          \"The `cursor` configuration can only be used with a stream token.\",\n        );\n      }\n\n      const tokenOrGetToken =\n        tokenOrQuery instanceof Query\n          ? () => this.query<EventSource>(tokenOrQuery).then((res) => res.data)\n          : tokenOrQuery;\n\n      return new StreamClient(tokenOrGetToken, streamClientConfig);\n    } else {\n      throw new ClientError(\"Streaming is not supported by this client.\");\n    }\n  }\n\n  /**\n   * Initialize a event feed in Fauna and returns an asynchronous iterator of\n   * feed events.\n   * @typeParam T - The expected type of the response from Fauna. T can be inferred\n   *   if the provided query used a type parameter.\n   * @param tokenOrQuery - A string-encoded token for an {@link EventSource}, or a {@link Query}\n   * @returns A {@link FeedClient} that which can be used to listen to a feed\n   *   of events\n   *\n   * @example\n   * ```javascript\n   *  const feed = client.feed(fql`MyCollection.all().eventSource()`)\n   *\n   *  try {\n   *    for await (const page of feed) {\n   *      for (const event of page.events) {\n   *        // ... handle event\n   *      }\n   *    }\n   *  } catch (error) {\n   *    // An error will be handled here if Fauna returns a terminal, \"error\" event, or\n   *    // if Fauna returns a non-200 response when trying to connect, or\n   *    // if the max number of retries on network errors is reached.\n   *\n   *    // ... handle fatal error\n   *  };\n   * ```\n   * @example\n   * The {@link FeedClient.flatten} method can be used so the iterator yields\n   * events directly. Each event is fetched asynchronously and hides when\n   * additional pages are fetched.\n   *\n   * ```javascript\n   *  const feed = client.feed(fql`MyCollection.all().eventSource()`)\n   *\n   *  for await (const user of feed.flatten()) {\n   *    // do something with each event\n   *  }\n   * ```\n   */\n  feed<T extends QueryValue>(\n    tokenOrQuery: EventSource | Query<EventSource>,\n    options?: Partial<FeedClientConfiguration>,\n  ): FeedClient<T> {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. No further requests can be issued.\",\n      );\n    }\n\n    const clientConfiguration: FeedClientConfiguration = {\n      ...this.#clientConfiguration,\n      httpClient: this.#httpClient,\n      ...options,\n    };\n\n    const tokenOrGetToken =\n      tokenOrQuery instanceof Query\n        ? () => this.query<EventSource>(tokenOrQuery).then((res) => res.data)\n        : tokenOrQuery;\n\n    return new FeedClient(tokenOrGetToken, clientConfiguration);\n  }\n\n  async #queryWithRetries<T extends QueryValue>(\n    queryRequest: QueryRequest,\n    queryOptions?: QueryOptions,\n    attempt = 0,\n  ): Promise<QuerySuccess<T>> {\n    const maxBackoff =\n      this.clientConfiguration.max_backoff ?? DEFAULT_CLIENT_CONFIG.max_backoff;\n    const maxAttempts =\n      this.clientConfiguration.max_attempts ??\n      DEFAULT_CLIENT_CONFIG.max_attempts;\n    const backoffMs =\n      Math.min(Math.random() * 2 ** attempt, maxBackoff) * 1_000;\n\n    attempt += 1;\n\n    try {\n      return await this.#query<T>(queryRequest, queryOptions, attempt);\n    } catch (error) {\n      if (error instanceof ThrottlingError && attempt < maxAttempts) {\n        await wait(backoffMs);\n        return this.#queryWithRetries<T>(queryRequest, queryOptions, attempt);\n      }\n      throw error;\n    }\n  }\n\n  #getError(e: any): ClientError | NetworkError | ProtocolError | ServiceError {\n    // the error was already handled by the driver\n    if (\n      e instanceof ClientError ||\n      e instanceof NetworkError ||\n      e instanceof ProtocolError ||\n      e instanceof ServiceError\n    ) {\n      return e;\n    }\n\n    // the HTTP request succeeded, but there was an error\n    if (isHTTPResponse(e)) {\n      // we got an error from the fauna service\n      if (isQueryFailure(e.body)) {\n        const failure = e.body;\n        const status = e.status;\n        return getServiceError(failure, status);\n      }\n\n      // we got a different error from the protocol layer\n      return new ProtocolError({\n        message: `Response is in an unkown format: ${e.body}`,\n        httpStatus: e.status,\n      });\n    }\n\n    // unknown error\n    return new ClientError(\n      \"A client level error occurred. Fauna was not called.\",\n      {\n        cause: e,\n      },\n    );\n  }\n\n  #getSecret(partialClientConfig?: ClientConfiguration): string {\n    let env_secret = undefined;\n    if (\n      typeof process !== \"undefined\" &&\n      process &&\n      typeof process === \"object\" &&\n      process.env &&\n      typeof process.env === \"object\"\n    ) {\n      env_secret = process.env[\"FAUNA_SECRET\"];\n    }\n\n    const maybeSecret = partialClientConfig?.secret ?? env_secret;\n    if (maybeSecret === undefined) {\n      throw new TypeError(\n        \"You must provide a secret to the driver. Set it \\\nin an environmental variable named FAUNA_SECRET or pass it to the Client\\\n constructor.\",\n      );\n    }\n    return maybeSecret;\n  }\n\n  #getEndpoint(partialClientConfig?: ClientConfiguration): URL {\n    // If the user explicitly sets the endpoint to undefined, we should throw a\n    // TypeError, rather than override with the default endpoint.\n    if (\n      partialClientConfig &&\n      \"endpoint\" in partialClientConfig &&\n      partialClientConfig.endpoint === undefined\n    ) {\n      throw new TypeError(\n        `ClientConfiguration option endpoint must be defined.`,\n      );\n    }\n\n    let env_endpoint: URL | undefined = undefined;\n    if (\n      typeof process !== \"undefined\" &&\n      process &&\n      typeof process === \"object\" &&\n      process.env &&\n      typeof process.env === \"object\"\n    ) {\n      env_endpoint = process.env[\"FAUNA_ENDPOINT\"]\n        ? new URL(process.env[\"FAUNA_ENDPOINT\"])\n        : undefined;\n    }\n\n    return partialClientConfig?.endpoint ?? env_endpoint ?? endpoints.default;\n  }\n\n  async #query<T extends QueryValue>(\n    queryRequest: QueryRequest,\n    queryOptions?: QueryOptions,\n    attempt = 0,\n  ): Promise<QuerySuccess<T>> {\n    try {\n      const requestConfig = {\n        ...this.#clientConfiguration,\n        ...queryOptions,\n      };\n\n      const headers = {\n        Authorization: `Bearer ${requestConfig.secret}`,\n      };\n      this.#setHeaders(requestConfig, headers);\n\n      const isTaggedFormat = requestConfig.format === \"tagged\";\n\n      const client_timeout_ms =\n        requestConfig.query_timeout_ms +\n        this.#clientConfiguration.client_timeout_buffer_ms;\n\n      const response = await this.#httpClient.request({\n        client_timeout_ms,\n        data: queryRequest,\n        headers,\n        method: \"POST\",\n      });\n\n      let parsedResponse;\n      try {\n        parsedResponse = {\n          ...response,\n          body: isTaggedFormat\n            ? TaggedTypeFormat.decode(response.body, {\n                long_type: requestConfig.long_type,\n              })\n            : JSON.parse(response.body),\n        };\n        if (parsedResponse.body.query_tags) {\n          const tags_array = (parsedResponse.body.query_tags as string)\n            .split(\",\")\n            .map((tag) => tag.split(\"=\"));\n          parsedResponse.body.query_tags = Object.fromEntries(tags_array);\n        }\n      } catch (error: unknown) {\n        throw new ProtocolError({\n          message: `Error parsing response as JSON: ${error}`,\n          httpStatus: response.status,\n        });\n      }\n\n      // Response is not from Fauna\n      if (!isQuerySuccess(parsedResponse.body)) {\n        throw this.#getError(parsedResponse);\n      }\n\n      const txn_ts = parsedResponse.body.txn_ts;\n      if (\n        (this.#lastTxnTs === undefined && txn_ts !== undefined) ||\n        (txn_ts !== undefined &&\n          this.#lastTxnTs !== undefined &&\n          this.#lastTxnTs < txn_ts)\n      ) {\n        this.#lastTxnTs = txn_ts;\n      }\n\n      const res = parsedResponse.body as QuerySuccess<T>;\n      if (res.stats) {\n        res.stats.attempts = attempt;\n      }\n      return res;\n    } catch (e: any) {\n      throw this.#getError(e);\n    }\n  }\n\n  #setHeaders(\n    fromObject: QueryOptions,\n    headerObject: Record<string, string | number>,\n  ): void {\n    const setHeader = <V>(\n      header: string,\n      value: V | undefined,\n      transform: (v: V) => string | number = (v) => String(v),\n    ) => {\n      if (value !== undefined) {\n        headerObject[header] = transform(value);\n      }\n    };\n\n    setHeader(\"x-format\", fromObject.format);\n    setHeader(\"x-typecheck\", fromObject.typecheck);\n    setHeader(\"x-performance-hints\", fromObject.performance_hints);\n    setHeader(\"x-query-timeout-ms\", fromObject.query_timeout_ms);\n    setHeader(\"x-linearized\", fromObject.linearized);\n    setHeader(\"x-max-contention-retries\", fromObject.max_contention_retries);\n    setHeader(\"traceparent\", fromObject.traceparent);\n    setHeader(\"x-query-tags\", fromObject.query_tags, (tags) =>\n      Object.entries(tags)\n        .map((tag) => tag.join(\"=\"))\n        .join(\",\"),\n    );\n    setHeader(\"x-last-txn-ts\", this.#lastTxnTs, (v) => v); // x-last-txn-ts doesn't get stringified\n    setHeader(\"x-driver-env\", Client.#driverEnvHeader);\n  }\n\n  #validateConfiguration() {\n    const config = this.#clientConfiguration;\n\n    const required_options: (keyof RequiredClientConfig)[] = [\n      \"client_timeout_buffer_ms\",\n      \"endpoint\",\n      \"format\",\n      \"http2_session_idle_ms\",\n      \"long_type\",\n      \"query_timeout_ms\",\n      \"fetch_keepalive\",\n      \"http2_max_streams\",\n      \"max_backoff\",\n      \"max_attempts\",\n    ];\n    required_options.forEach((option) => {\n      if (config[option] === undefined) {\n        throw new TypeError(\n          `ClientConfiguration option '${option}' must be defined.`,\n        );\n      }\n    });\n\n    if (config.http2_max_streams <= 0) {\n      throw new RangeError(`'http2_max_streams' must be greater than zero.`);\n    }\n\n    if (config.client_timeout_buffer_ms <= 0) {\n      throw new RangeError(\n        `'client_timeout_buffer_ms' must be greater than zero.`,\n      );\n    }\n\n    if (config.query_timeout_ms <= 0) {\n      throw new RangeError(`'query_timeout_ms' must be greater than zero.`);\n    }\n\n    if (config.max_backoff <= 0) {\n      throw new RangeError(`'max_backoff' must be greater than zero.`);\n    }\n\n    if (config.max_attempts <= 0) {\n      throw new RangeError(`'max_attempts' must be greater than zero.`);\n    }\n  }\n}\n\n/**\n * A class to listen to Fauna streams.\n */\nexport class StreamClient<T extends QueryValue = any> {\n  /** Whether or not this stream has been closed */\n  closed = false;\n  /** The stream client options */\n  #clientConfiguration: StreamClientConfiguration;\n  /** A tracker for the number of connection attempts */\n  #connectionAttempts = 0;\n  /** A lambda that returns a promise for a {@link EventSource} */\n  #query: () => Promise<EventSource>;\n  /** The last `txn_ts` value received from events */\n  #last_ts?: number;\n  /** The last `cursor` value received from events */\n  #last_cursor?: string;\n  /** A common interface to operate a stream from any HTTPStreamClient */\n  #streamAdapter?: StreamAdapter;\n  /** A saved copy of the EventSource once received */\n  #eventSource?: EventSource;\n\n  /**\n   *\n   * @param token - A lambda that returns a promise for a {@link EventSource}\n   * @param clientConfiguration - The {@link ClientConfiguration} to apply\n   * @example\n   * ```typescript\n   *  const streamClient = client.stream(eventSource);\n   * ```\n   */\n  constructor(\n    token: EventSource | (() => Promise<EventSource>),\n    clientConfiguration: StreamClientConfiguration,\n  ) {\n    if (isEventSource(token)) {\n      this.#query = () => Promise.resolve(token);\n    } else {\n      this.#query = token;\n    }\n\n    this.#clientConfiguration = clientConfiguration;\n\n    this.#validateConfiguration();\n  }\n\n  /**\n   * A synchronous method to start listening to the stream and handle events\n   * using callbacks.\n   * @param onEvent - A callback function to handle each event\n   * @param onError - An Optional callback function to handle errors. If none is\n   * provided, error will not be handled, and the stream will simply end.\n   */\n  start(\n    onEvent: (event: StreamEventData<T> | StreamEventStatus) => void,\n    onError?: (error: Error) => void,\n  ) {\n    if (typeof onEvent !== \"function\") {\n      throw new TypeError(\n        `Expected a function as the 'onEvent' argument, but received ${typeof onEvent}. Please provide a valid function.`,\n      );\n    }\n    if (onError && typeof onError !== \"function\") {\n      throw new TypeError(\n        `Expected a function as the 'onError' argument, but received ${typeof onError}. Please provide a valid function.`,\n      );\n    }\n    const run = async () => {\n      try {\n        for await (const event of this) {\n          onEvent(event);\n        }\n      } catch (error) {\n        if (onError) {\n          onError(error as Error);\n        }\n      }\n    };\n    run();\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<\n    StreamEventData<T> | StreamEventStatus\n  > {\n    if (this.closed) {\n      throw new ClientError(\"The stream has been closed and cannot be reused.\");\n    }\n\n    if (!this.#eventSource) {\n      this.#eventSource = await this.#query().then((maybeStreamToken) => {\n        if (!isEventSource(maybeStreamToken)) {\n          throw new ClientError(\n            `Error requesting a stream token. Expected a EventSource as the query result, but received ${typeof maybeStreamToken}. Your query must return the result of '<Set>.eventSource' or '<Set>.eventsOn')\\n` +\n              `Query result: ${JSON.stringify(maybeStreamToken, null)}`,\n          );\n        }\n        return maybeStreamToken;\n      });\n    }\n\n    this.#connectionAttempts = 1;\n    while (!this.closed) {\n      const backoffMs =\n        Math.min(\n          Math.random() * 2 ** this.#connectionAttempts,\n          this.#clientConfiguration.max_backoff,\n        ) * 1_000;\n\n      try {\n        for await (const event of this.#startStream()) {\n          yield event;\n        }\n      } catch (error: any) {\n        if (\n          error instanceof FaunaError ||\n          this.#connectionAttempts >= this.#clientConfiguration.max_attempts\n        ) {\n          // A terminal error from Fauna\n          this.close();\n          throw error;\n        }\n\n        this.#connectionAttempts += 1;\n        await wait(backoffMs);\n      }\n    }\n  }\n\n  close() {\n    if (this.#streamAdapter) {\n      this.#streamAdapter.close();\n      this.#streamAdapter = undefined;\n    }\n    this.closed = true;\n  }\n\n  get last_ts(): number | undefined {\n    return this.#last_ts;\n  }\n\n  async *#startStream(): AsyncGenerator<\n    StreamEventData<T> | StreamEventStatus\n  > {\n    // Safety: This method must only be called after a stream token has been acquired\n    const eventSource = this.#eventSource as EventSource;\n\n    const headers = {\n      Authorization: `Bearer ${this.#clientConfiguration.secret}`,\n    };\n\n    const streamAdapter = this.#clientConfiguration.httpStreamClient.stream({\n      data: {\n        token: eventSource.token,\n        cursor: this.#last_cursor || this.#clientConfiguration.cursor,\n      },\n      headers,\n      method: \"POST\",\n    });\n\n    this.#streamAdapter = streamAdapter;\n\n    for await (const event of streamAdapter.read) {\n      // stream events are always tagged\n      const deserializedEvent: StreamEvent<T> = TaggedTypeFormat.decode(event, {\n        long_type: this.#clientConfiguration.long_type,\n      });\n\n      if (deserializedEvent.type === \"error\") {\n        // Errors sent from Fauna are assumed fatal\n        this.close();\n        throw getServiceError(deserializedEvent);\n      }\n\n      this.#last_ts = deserializedEvent.txn_ts;\n      this.#last_cursor = deserializedEvent.cursor;\n\n      // TODO: remove this once all environments have updated the events to use \"status\" instead of \"start\"\n      if ((deserializedEvent.type as any) === \"start\") {\n        deserializedEvent.type = \"status\";\n      }\n\n      if (\n        !this.#clientConfiguration.status_events &&\n        deserializedEvent.type === \"status\"\n      ) {\n        continue;\n      }\n\n      yield deserializedEvent;\n    }\n  }\n\n  #validateConfiguration() {\n    const config = this.#clientConfiguration;\n\n    const required_options: (keyof StreamClientConfiguration)[] = [\n      \"long_type\",\n      \"httpStreamClient\",\n      \"max_backoff\",\n      \"max_attempts\",\n      \"secret\",\n    ];\n    required_options.forEach((option) => {\n      if (config[option] === undefined) {\n        throw new TypeError(\n          `ClientConfiguration option '${option}' must be defined.`,\n        );\n      }\n    });\n\n    if (config.max_backoff <= 0) {\n      throw new RangeError(`'max_backoff' must be greater than zero.`);\n    }\n\n    if (config.max_attempts <= 0) {\n      throw new RangeError(`'max_attempts' must be greater than zero.`);\n    }\n  }\n}\n\n/**\n * A class to iterate through to a Fauna event feed.\n */\nexport class FeedClient<T extends QueryValue = any> {\n  /** A static copy of the driver env header to send with each request */\n  static readonly #driverEnvHeader = getDriverEnv();\n  /** A lambda that returns a promise for a {@link EventSource} */\n  #query: () => Promise<EventSource>;\n  /** The event feed's client options */\n  #clientConfiguration: FeedClientConfiguration;\n  /** The last `cursor` value received for the current page */\n  #lastCursor?: string;\n  /** A saved copy of the EventSource once received */\n  #eventSource?: EventSource;\n  /** Whether or not another page can be fetched by the client */\n  #isDone?: boolean;\n\n  /**\n   *\n   * @param token - A lambda that returns a promise for a {@link EventSource}\n   * @param clientConfiguration - The {@link FeedClientConfiguration} to apply\n   * @example\n   * ```typescript\n   *  const feed = client.feed(eventSource);\n   * ```\n   */\n  constructor(\n    token: EventSource | (() => Promise<EventSource>),\n    clientConfiguration: FeedClientConfiguration,\n  ) {\n    if (isEventSource(token)) {\n      this.#query = () => Promise.resolve(token);\n    } else {\n      this.#query = token;\n    }\n\n    this.#clientConfiguration = clientConfiguration;\n    this.#lastCursor = clientConfiguration.cursor;\n\n    this.#validateConfiguration();\n  }\n\n  #getHeaders(): Record<string, string> {\n    return {\n      Authorization: `Bearer ${this.#clientConfiguration.secret}`,\n      \"x-format\": \"tagged\",\n      \"x-driver-env\": FeedClient.#driverEnvHeader,\n      \"x-query-timeout-ms\":\n        this.#clientConfiguration.query_timeout_ms.toString(),\n    };\n  }\n\n  async #nextPageHttpRequest() {\n    // If we never resolved the stream token, do it now since we need it here when\n    // building the payload\n    if (!this.#eventSource) {\n      this.#eventSource = await this.#resolveEventSource(this.#query);\n    }\n\n    const headers = this.#getHeaders();\n\n    const req: HTTPRequest<FeedRequest> = {\n      headers,\n      client_timeout_ms:\n        this.#clientConfiguration.client_timeout_buffer_ms +\n        this.#clientConfiguration.query_timeout_ms,\n      data: {\n        token: this.#eventSource.token,\n      },\n      method: \"POST\",\n      path: FaunaAPIPaths.EVENT_FEED,\n    };\n\n    // Set the page size if it is available\n    if (this.#clientConfiguration.page_size) {\n      req.data.page_size = this.#clientConfiguration.page_size;\n    }\n\n    // If we have a cursor, use that. Otherwise, use the start_ts if available.\n    // When the config is validated, if both are set, an error is thrown.\n    if (this.#lastCursor) {\n      req.data.cursor = this.#lastCursor;\n    } else if (this.#clientConfiguration.start_ts) {\n      req.data.start_ts = this.#clientConfiguration.start_ts;\n    }\n\n    return req;\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<FeedPage<T>> {\n    while (!this.#isDone) {\n      yield await this.nextPage();\n    }\n  }\n\n  /**\n   * Fetches the next page of the event feed. If there are no more pages to\n   * fetch, this method will throw a {@link ClientError}.\n   */\n  async nextPage(): Promise<FeedPage<T>> {\n    if (this.#isDone) {\n      throw new ClientError(\"The event feed has no more pages to fetch.\");\n    }\n\n    const { httpClient } = this.#clientConfiguration;\n\n    const request = await this.#nextPageHttpRequest();\n    const response = await withRetries(() => httpClient.request(request), {\n      maxAttempts: this.#clientConfiguration.max_attempts,\n      maxBackoff: this.#clientConfiguration.max_backoff,\n      shouldRetry: (error) => error instanceof ThrottlingError,\n    });\n\n    let body: FeedSuccess<T> | FeedError;\n\n    try {\n      body = TaggedTypeFormat.decode(response.body, {\n        long_type: this.#clientConfiguration.long_type,\n      });\n    } catch (error: unknown) {\n      throw new ProtocolError({\n        message: `Error parsing response as JSON: ${error}`,\n        httpStatus: response.status,\n      });\n    }\n\n    if (isQueryFailure(body)) {\n      throw getServiceError(body, response.status);\n    }\n\n    const page = new FeedPage<T>(body);\n    this.#lastCursor = page.cursor;\n    this.#isDone = !page.hasNext;\n\n    return page;\n  }\n\n  /**\n   * Returns an async generator that yields the events of the event feed\n   * directly.\n   *\n   * @example\n   * ```javascript\n   *  const feed = client.feed(fql`MyCollection.all().eventSource()`)\n   *\n   *  for await (const user of feed.flatten()) {\n   *    // do something with each event\n   *  }\n   * ```\n   */\n  async *flatten(): AsyncGenerator<StreamEventData<T>> {\n    for await (const page of this) {\n      for (const event of page.events) {\n        yield event;\n      }\n    }\n  }\n\n  async #resolveEventSource(\n    fn: () => Promise<EventSource>,\n  ): Promise<EventSource> {\n    return await fn().then((maybeEventSource) => {\n      if (!isEventSource(maybeEventSource)) {\n        throw new ClientError(\n          `Error requesting a stream token. Expected a EventSource as the query result, but received ${typeof maybeEventSource}. Your query must return the result of '<Set>.eventSource' or '<Set>.eventsOn')\\n` +\n            `Query result: ${JSON.stringify(maybeEventSource, null)}`,\n        );\n      }\n      return maybeEventSource;\n    });\n  }\n\n  #validateConfiguration() {\n    const config = this.#clientConfiguration;\n\n    const required_options: (keyof FeedClientConfiguration)[] = [\n      \"long_type\",\n      \"httpClient\",\n      \"max_backoff\",\n      \"max_attempts\",\n      \"client_timeout_buffer_ms\",\n      \"query_timeout_ms\",\n      \"secret\",\n    ];\n    required_options.forEach((option) => {\n      if (config[option] === undefined) {\n        throw new TypeError(\n          `ClientConfiguration option '${option}' must be defined.`,\n        );\n      }\n    });\n\n    if (config.max_backoff <= 0) {\n      throw new RangeError(`'max_backoff' must be greater than zero.`);\n    }\n\n    if (config.max_attempts <= 0) {\n      throw new RangeError(`'max_attempts' must be greater than zero.`);\n    }\n\n    if (config.query_timeout_ms <= 0) {\n      throw new RangeError(`'query_timeout_ms' must be greater than zero.`);\n    }\n\n    if (config.client_timeout_buffer_ms < 0) {\n      throw new RangeError(\n        `'client_timeout_buffer_ms' must be greater than or equal to zero.`,\n      );\n    }\n\n    if (config.start_ts !== undefined && config.cursor !== undefined) {\n      throw new TypeError(\n        \"Only one of 'start_ts' or 'cursor' can be defined in the client configuration.\",\n      );\n    }\n\n    if (config.cursor !== undefined && typeof config.cursor !== \"string\") {\n      throw new TypeError(\"'cursor' must be a string.\");\n    }\n  }\n}\n\n// Private types and constants for internal logic.\n\nfunction wait(ms: number) {\n  return new Promise((r) => setTimeout(r, ms));\n}\n"],
  "mappings": "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",
  "names": ["len", "i", "len2", "signal", "reader", "self", "Query", "base64", "Query", "navigator", "os", "Query", "_driverEnvHeader", "_query", "_clientConfiguration", "_validateConfiguration", "validateConfiguration_fn"]
}
